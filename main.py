# -*- coding: utf-8 -*-

# --- 1. –ò–ú–ü–û–†–¢–´ –ò –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ---
import discord
from discord import ui, app_commands
from discord.ext import commands, tasks
import google.generativeai as genai
import os
from dotenv import load_dotenv
from flask import Flask
from threading import Thread
from PIL import Image
import io
import json
import random
import string
from datetime import datetime, time, timezone
import sys
import asyncio
import re
import shutil
import aiohttp

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MAIN_GUILD_ID = os.getenv("MAIN_GUILD_ID")
ADMIN_GUILD_ID = os.getenv("ADMIN_GUILD_ID")
CODE_CHANNEL_ID = os.getenv("CODE_CHANNEL_ID")
OWNER_USER_ID = os.getenv("OWNER_USER_ID")
LORE_CHANNEL_IDS = os.getenv("LORE_CHANNEL_IDS")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ ID –∏ –∫–ª—é—á–∏ –Ω–∞ –º–µ—Å—Ç–µ
if not all([DISCORD_TOKEN, GEMINI_API_KEY, MAIN_GUILD_ID, ADMIN_GUILD_ID, CODE_CHANNEL_ID, OWNER_USER_ID, LORE_CHANNEL_IDS]):
    raise ValueError("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π –∏–ª–∏ ID (DISCORD_TOKEN, GEMINI_API_KEY, *_GUILD_ID, CODE_CHANNEL_ID, OWNER_USER_ID, LORE_CHANNEL_IDS) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API Gemini
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-flash')

# --- 2. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –§–£–ù–ö–¶–ò–ò –î–õ–Ø –õ–û–†–ê ---
VALDES_LORE = ""
LORE_IMAGES_DIR = "lore_images"
IMAGE_MAP_FILE = "image_map.json"

def load_lore_from_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ—Ä –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å –±–æ—Ç–∞."""
    global VALDES_LORE
    try:
        with open("file.txt", "r", encoding="utf-8") as f:
            VALDES_LORE = f.read()
        print("–õ–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç—å.")
    except FileNotFoundError:
        print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª 'file.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        VALDES_LORE = "–õ–æ—Ä –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞."

# --- 3. –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–ú–ü–¢–´ ---
def get_optimizer_prompt(level):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –†–ü-–ø–æ—Å—Ç–æ–≤."""
    return f"""
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ '–í–∞–ª—å–¥–µ—Å'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç –∏–≥—Ä–æ–∫–∞.

**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø –ü–û–°–¢–ê (–°–ê–ú–û–ï –í–ê–ñ–ù–û–ï):**
1.  **–î–ï–ô–°–¢–í–ò–Ø:** –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏. –ü—Ä–∏–º–µ—Ä: `**–û–Ω –ø–æ–¥–Ω—è–ª—Å—è —Å –∫—Ä–æ–≤–∞—Ç–∏.**`
2.  **–ú–´–°–õ–ò –ò –ó–í–£–ö–ò:** –í—Å–µ –º—ã—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ø–µ–≤–∞–Ω–∏–µ, –º—ã—á–∞–Ω–∏–µ –∏ —Ç.–¥., –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏. –ü—Ä–∏–º–µ—Ä: `"–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å."` –∏–ª–∏ `"–ú–º–º-—Ö–º–º..."`
3.  **–†–ï–ß–¨:** –í—Å—è –ø—Ä—è–º–∞—è —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –¥–µ—Ñ–∏—Å–∞ –∏ –ø—Ä–æ–±–µ–ª–∞. –ü—Ä–∏–º–µ—Ä: `- –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.`
4.  –ö–∞–∂–¥—ã–π —Ç–∏–ø (–¥–µ–π—Å—Ç–≤–∏–µ, –º—ã—Å–ª—å, —Ä–µ—á—å) **–û–ë–Ø–ó–ê–ù** –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.

**–ó–û–õ–û–¢–´–ï –ü–†–ê–í–ò–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò:**
1.  **–ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–ï –û–¢ –¢–†–ï–¢–¨–ï–ì–û –õ–ò–¶–ê:** –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –æ—Ç **—Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞** (–û–Ω/–û–Ω–∞), –¥–∞–∂–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–ø–∏—Å–∞–ª –æ—Ç –ø–µ—Ä–≤–æ–≥–æ ('–Ø –¥–µ–ª–∞—é').
2.  **–ó–ê–ü–†–ï–¢ –ù–ê –°–ò–ú–í–û–õ–´:** –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ `** **`, `" "` –∏ `- `. –ù–∏–∫–∞–∫–∏—Ö `()`, `<<>>` –∏ –ø—Ä–æ—á–µ–≥–æ.
3.  **–ù–ï –ë–´–¢–¨ –°–û–ê–í–¢–û–†–û–ú:** –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.
"""

def get_lore_prompt():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª–æ—Ä—É."""
    return f"""
–¢—ã ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π –º–∏—Ä–∞ '–í–∞–ª—å–¥–µ—Å'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–≥—Ä–æ–∫–æ–≤, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ç–µ–±–µ —Ç–µ–∫—Å—Ç–µ —Å –ª–æ—Ä–æ–º –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.

**–¢–í–û–ò –ü–†–ê–í–ò–õ–ê:**
1.  **–ò–°–¢–û–ß–ù–ò–ö ‚Äî –ó–ê–ö–û–ù:** –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–≤–Ω–µ.
2.  **–ù–ï –î–û–î–£–ú–´–í–ê–ô:** –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏: "–í –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞—Ö –Ω–µ—Ç —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É." –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
3.  **–°–¢–ò–õ–¨:** –û—Ç–≤–µ—á–∞–π —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ, –≤ —Å—Ç–∏–ª–µ –º—É–¥—Ä–æ–≥–æ –ª–µ—Ç–æ–ø–∏—Å—Ü–∞.
4.  **–†–ê–ë–û–¢–ê –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò:** –í —Ç–µ–∫—Å—Ç–µ –ª–æ—Ä–∞ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –≤–∏–¥–∞ `[IMAGE_XXX]`. –≠—Ç–∏ —Ç–µ–≥–∏ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ **–æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ–∫—Å—Ç—É, –≤ –∫–æ–Ω—Ü–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω–∏ —Å—Ç–æ—è—Ç**. –ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–≤–æ–π –æ—Ç–≤–µ—Ç, **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å —ç—Ç–æ—Ç —Ç–µ–≥** –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.
    *   –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: `–î–≤–∞—Ä—Ñ—ã - —ç—Ç–æ –Ω–∏–∑–∫–æ—Ä–æ—Å–ª—ã–π –Ω–∞—Ä–æ–¥...%%SOURCES%%‚ïë...‚îÇ–∫–∞–Ω–∞–ª\n[IMAGE_123]`
    *   –í—Å—Ç–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –û–î–ò–ù, —Å–∞–º—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ç–µ–≥. –ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –ø–æ—Å–ª–µ —Ç–µ–≥–∞.
5.  **–¶–ò–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–û–í (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û):** –ü–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Ç—ã **–î–û–õ–ñ–ï–ù** –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å `%%SOURCES%%`. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∞ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞ `--- –ù–ê–ß–ê–õ–û –ö–ê–ù–ê–õ–ê: [–ò–º—è –∫–∞–Ω–∞–ª–∞] ---`.
    *   –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: `–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.%%SOURCES%%‚ïëüåü‚îÇ–∞—Å—Ç—Ä–æ–º–∞–Ω—Ç–∏—è, ‚ïëüß¨‚îÇ–≤–∏–¥—ã-—Ä–∞–∑—É–º–Ω—ã—Ö-—Å—É—â–Ω–æ—Å—Ç–µ–π`

–í–æ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —Ç–≤–æ–µ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π:
--- –ù–ê–ß–ê–õ–û –î–û–ö–£–ú–ï–ù–¢–ê –° –õ–û–†–û–ú ---
{VALDES_LORE}
--- –ö–û–ù–ï–¶ –î–û–ö–£–ú–ï–ù–¢–ê –° –õ–û–†–û–ú ---
"""

# –ù–û–í–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ê–ù–ö–ï–¢
def get_character_prompt():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    return f"""
–¢—ã ‚Äî –ú–∞—Å—Ç–µ—Ä-—Å–æ–∑–¥–∞—Ç–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ '–í–∞–ª—å–¥–µ—Å'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–ø–∏—à–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç –º–∏—Ä.

**–°–¢–†–£–ö–¢–£–†–ê –ê–ù–ö–ï–¢–´ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û):**
–ê–Ω–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã, –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º:
- **–ò–º—è:**
- **–í–æ–∑—Ä–∞—Å—Ç:**
- **–†–∞—Å–∞:** (–î–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª–æ—Ä—É –º–∏—Ä–∞)
- **–í–Ω–µ—à–Ω–æ—Å—Ç—å:** (–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- **–•–∞—Ä–∞–∫—Ç–µ—Ä:** (–ö–ª—é—á–µ–≤—ã–µ —á–µ—Ä—Ç—ã, –º–∞–Ω–µ—Ä—ã, –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- **–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:** (–ö—Ä–∞—Ç–∫–∞—è, –Ω–æ –µ–º–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –∂–∏–∑–Ω–∏, –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- **–ù–∞–≤—ã–∫–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:** (–ß—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å, 2-3 –ø—É–Ω–∫—Ç–∞)

**–ü–†–ê–í–ò–õ–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:**
1.  **–õ–û–† ‚Äî –≠–¢–û –ó–ê–ö–û–ù:** –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç —Å –ª–æ—Ä–æ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏—Ä–µ, —Ä–∞—Å–∞—Ö, –º–µ—Å—Ç–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –ª–æ—Ä—É.
2.  **–ö–†–ï–ê–¢–ò–í–ù–û–°–¢–¨:** –ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ–±–µ–ª—ã, –¥–æ–±–∞–≤—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Å–¥–µ–ª–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∂–∏–≤—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.
3.  **–§–û–†–ú–ê–¢:** –í—ã–¥–∞–π –≤ –æ—Ç–≤–µ—Ç–µ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –ª–∏—à–Ω–∏—Ö —Ñ—Ä–∞–∑. –¢–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç–∞.

--- –ù–ê–ß–ê–õ–û –î–û–ö–£–ú–ï–ù–¢–ê –° –õ–û–†–û–ú ---
{VALDES_LORE}
--- –ö–û–ù–ï–¶ –î–û–ö–£–ú–ï–ù–¢–ê –° –õ–û–†–û–ú ---
"""


# --- 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ö–û–î (keep_alive, UI, —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º –¥–æ—Å—Ç—É–ø–∞) ---
app = Flask('')
@app.route('/')
def home(): return "Bot is alive and running!"
def run(): app.run(host='0.0.0.0', port=8080)
def keep_alive():
    Thread(target=run, daemon=True).start()

class OptimizedPostModal(ui.Modal, title='–í–∞—à —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ—Å—Ç'):
    def __init__(self, optimized_text: str):
        super().__init__()
        self.post_content = ui.TextInput(label="–¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é", style=discord.TextStyle.paragraph, default=optimized_text, max_length=1800)
        self.add_item(self.post_content)
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message("–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.", ephemeral=True, delete_after=3)

class PostView(ui.View):
    def __init__(self, optimized_text: str):
        super().__init__(timeout=300)
        self.optimized_text = optimized_text
    @ui.button(label="üìù –ü–æ–∫–∞–∑–∞—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", style=discord.ButtonStyle.primary)
    async def show_modal_button(self, interaction: discord.Interaction, button: ui.Button):
        modal = OptimizedPostModal(self.optimized_text)
        await interaction.response.send_modal(modal)

# –ù–û–í–´–ï UI –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –ê–ù–ö–ï–¢–´
class CharacterSheetModal(ui.Modal, title='–ê–Ω–∫–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'):
    def __init__(self, character_sheet_text: str):
        super().__init__(timeout=None)
        # –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        self.sheet_content = ui.TextInput(label="–¢–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã –≥–æ—Ç–æ–≤ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é", style=discord.TextStyle.paragraph, default=character_sheet_text, max_length=4000)
        self.add_item(self.sheet_content)
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message("–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.", ephemeral=True, delete_after=3)

class CharacterSheetView(ui.View):
    def __init__(self, character_sheet_text: str):
        super().__init__(timeout=300)
        self.character_sheet_text = character_sheet_text
    @ui.button(label="üìù –ü–æ–∫–∞–∑–∞—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É", style=discord.ButtonStyle.primary)
    async def show_modal_button(self, interaction: discord.Interaction, button: ui.Button):
        modal = CharacterSheetModal(self.character_sheet_text)
        await interaction.response.send_modal(modal)

DAILY_ACCESS_CODE = ""
CODE_FILE = "code.json"

def save_daily_code(code):
    data = {'code': code, 'date': datetime.now().strftime('%Y-%m-%d')}
    with open(CODE_FILE, 'w') as f:
        json.dump(data, f)

def load_daily_code():
    global DAILY_ACCESS_CODE
    try:
        with open(CODE_FILE, 'r') as f:
            data = json.load(f)
            if data['date'] == datetime.now().strftime('%Y-%m-%d'):
                DAILY_ACCESS_CODE = data['code']
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {DAILY_ACCESS_CODE}")
                return
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    
    new_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    DAILY_ACCESS_CODE = new_code
    save_daily_code(new_code)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {DAILY_ACCESS_CODE}")

# --- 5. –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ---
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True
bot = commands.Bot(command_prefix="!", intents=intents)

# --- 6. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ó–ê–î–ê–ß–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–î–ê ---
async def send_access_code_to_admin_channel(code: str, title: str, description: str):
    try:
        admin_channel = bot.get_channel(int(CODE_CHANNEL_ID))
        if admin_channel:
            embed = discord.Embed(title=title, description=description, color=discord.Color.gold(), timestamp=datetime.now())
            embed.add_field(name="–ö–æ–¥", value=f"```{code}```")
            embed.set_footer(text="–≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–∏—Ö —Å—É—Ç–æ–∫ (–ø–æ UTC).")
            await admin_channel.send(embed=embed)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")

@tasks.loop(time=time(hour=0, minute=0, tzinfo=timezone.utc))
async def update_code_task():
    global DAILY_ACCESS_CODE
    new_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    DAILY_ACCESS_CODE = new_code
    save_daily_code(new_code)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥: {new_code}")
    await send_access_code_to_admin_channel(code=new_code, title="üîë –ù–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", description="–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/update_lore` –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞:")

@update_code_task.before_loop
async def before_update_code_task():
    await bot.wait_until_ready()

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    load_lore_from_file()
    load_daily_code()
    if not update_code_task.is_running():
        update_code_task.start()
    await send_access_code_to_admin_channel(code=DAILY_ACCESS_CODE, title="‚öôÔ∏è –¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ (–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)", description="–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# --- 7. –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ---

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–ß–ò–°–¢–ò–õ–¨–©–ò–ö
def clean_discord_mentions(text: str, guild: discord.Guild) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤, —Ä–æ–ª–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∏—Ö –∏–º–µ–Ω–∞."""
    if not text:
        return ""

    # –ó–∞–º–µ–Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤: <#123456789> -> #channel-name
    text = re.sub(r'<#(\d+)>', lambda m: f'#{bot.get_channel(int(m.group(1))).name}' if bot.get_channel(int(m.group(1))) else m.group(0), text)
    
    # –ó–∞–º–µ–Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–æ–ª–µ–π: <@&123456789> -> @role-name
    if guild:
        text = re.sub(r'<@&(\d+)>', lambda m: f'@{guild.get_role(int(m.group(1))).name}' if guild.get_role(int(m.group(1))) else m.group(0), text)
    
    # –ó–∞–º–µ–Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <@123456789> –∏–ª–∏ <@!123456789> -> @username
    text = re.sub(r'<@!?(\d+)>', lambda m: f'@{bot.get_user(int(m.group(1))).display_name}' if bot.get_user(int(m.group(1))) else m.group(0), text)
    
    return text

@bot.tree.command(name="update_lore", description="[–ê–î–ú–ò–ù] –°–æ–±–∏—Ä–∞–µ—Ç –ª–æ—Ä –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª.")
@app_commands.describe(access_code="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
async def update_lore(interaction: discord.Interaction, access_code: str):
    if str(interaction.user.id) != OWNER_USER_ID and not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞.", ephemeral=True)
        return
    if str(interaction.guild.id) != MAIN_GUILD_ID:
        await interaction.response.send_message("‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
        return
    if access_code != DAILY_ACCESS_CODE:
        await interaction.response.send_message("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.** –ü–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
        return
        
    await interaction.response.defer(ephemeral=True, thinking=True)
    
    if os.path.exists(LORE_IMAGES_DIR):
        shutil.rmtree(LORE_IMAGES_DIR)
    os.makedirs(LORE_IMAGES_DIR)

    try:
        channel_ids = [int(id.strip()) for id in LORE_CHANNEL_IDS.split(',')]
    except ValueError:
        await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** –°–ø–∏—Å–æ–∫ ID –∫–∞–Ω–∞–ª–æ–≤ –≤ .env —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.", ephemeral=True)
        return

    full_lore_text = ""
    parsed_channels_count = 0
    total_messages_count = 0
    image_id_counter = 1
    image_map = {}
    downloaded_images_count = 0
    
    channels_to_parse = [bot.get_channel(cid) for cid in channel_ids if bot.get_channel(cid) is not None]
    sorted_channels = sorted(channels_to_parse, key=lambda c: c.position)

    async with aiohttp.ClientSession() as session:
        
        async def download_and_register_image(url):
            nonlocal image_id_counter, image_map, downloaded_images_count
            try:
                async with session.get(url) as resp:
                    if resp.status == 200:
                        image_bytes = await resp.read()
                        image_id = f"IMAGE_{image_id_counter}"
                        
                        content_type = resp.headers.get('Content-Type', '')
                        file_extension = 'png'
                        if 'jpeg' in content_type or 'jpg' in content_type: file_extension = 'jpg'
                        elif 'png' in content_type: file_extension = 'png'
                        elif 'gif' in content_type: file_extension = 'gif'
                        elif 'webp' in content_type: file_extension = 'webp'
                        
                        new_filename = f"{image_id}.{file_extension}"
                        save_path = os.path.join(LORE_IMAGES_DIR, new_filename)
                        
                        with open(save_path, 'wb') as f: f.write(image_bytes)
                        
                        image_map[image_id] = new_filename
                        image_id_counter += 1
                        downloaded_images_count += 1
                        return f"[{image_id}]"
                    return None
            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {e}")
                return None

        for channel in sorted_channels:
            full_lore_text += f"\n--- –ù–ê–ß–ê–õ–û –ö–ê–ù–ê–õ–ê: {channel.name} ---\n\n"
            
            async def parse_message(message, guild):
                nonlocal full_lore_text, total_messages_count
                
                content_parts = []
                
                # 1. –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—É–∂–µ –æ—á–∏—â–µ–Ω–Ω—ã–π)
                if message.content:
                    content_parts.append(clean_discord_mentions(message.content.strip(), guild))
                
                # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–±–µ–¥–æ–≤
                if message.embeds:
                    for embed in message.embeds:
                        embed_text_parts = []
                        if embed.title:
                            embed_text_parts.append(f"**{clean_discord_mentions(embed.title, guild)}**")
                        if embed.description:
                            embed_text_parts.append(clean_discord_mentions(embed.description, guild))
                        
                        if embed_text_parts:
                            content_parts.append("\n".join(embed_text_parts))
                        
                        if embed.image and embed.image.url:
                            image_tag = await download_and_register_image(embed.image.url)
                            if image_tag: content_parts.append(image_tag)

                        for field in embed.fields:
                            field_name = clean_discord_mentions(field.name, guild)
                            field_value = clean_discord_mentions(field.value, guild)
                            field_text = f"**{field_name}**\n{field_value}"
                            content_parts.append(field_text)
                
                # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if message.attachments:
                    image_attachments = [att for att in message.attachments if att.content_type and att.content_type.startswith('image/')]
                    for attachment in image_attachments:
                        image_tag = await download_and_register_image(attachment.url)
                        if image_tag: content_parts.append(image_tag)
                
                if content_parts:
                    final_text_for_message = "\n\n".join(filter(None, content_parts))
                    full_lore_text += final_text_for_message + "\n\n"
                    total_messages_count += 1

            if isinstance(channel, discord.ForumChannel):
                all_threads = channel.threads
                try:
                    archived_threads = [thread async for thread in channel.archived_threads(limit=None)]
                    all_threads.extend(archived_threads)
                except discord.Forbidden:
                    print(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ä—Ö–∏–≤–Ω—ã–º –≤–µ—Ç–∫–∞–º –≤ –∫–∞–Ω–∞–ª–µ: {channel.name}")
                
                sorted_threads = sorted(all_threads, key=lambda t: t.created_at)
                for thread in sorted_threads:
                    full_lore_text += f"--- –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {thread.name} ---\n\n"
                    async for message in thread.history(limit=500, oldest_first=True):
                        await parse_message(message, interaction.guild) # –ü–µ—Ä–µ–¥–∞–µ–º guild
                    full_lore_text += f"--- –ö–æ–Ω–µ—Ü –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {thread.name} ---\n\n"
            else:
                async for message in channel.history(limit=500, oldest_first=True):
                    await parse_message(message, interaction.guild) # –ü–µ—Ä–µ–¥–∞–µ–º guild

            full_lore_text += f"--- –ö–û–ù–ï–¶ –ö–ê–ù–ê–õ–ê: {channel.name} ---\n"
            parsed_channels_count += 1

    try:
        with open("file.txt", "w", encoding="utf-8") as f:
            f.write(full_lore_text)
        with open(IMAGE_MAP_FILE, "w", encoding="utf-8") as f:
            json.dump(image_map, f, indent=4)
        
        load_lore_from_file()
        file_size = os.path.getsize("file.txt") / 1024
        
        embed = discord.Embed(title="‚úÖ –õ–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", description="–§–∞–π–ª `file.txt` –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", color=discord.Color.green())
        embed.add_field(name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤", value=str(parsed_channels_count), inline=True)
        embed.add_field(name="–°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π", value=str(total_messages_count), inline=True)
        embed.add_field(name="–°–∫–∞—á–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", value=str(downloaded_images_count), inline=True)
        embed.add_field(name="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", value=f"{file_size:.2f} –ö–ë", inline=True)
        
        await interaction.followup.send(embed=embed, file=discord.File("file.txt"), ephemeral=True)
        await interaction.followup.send("‚úÖ **–õ–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω.** –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...", ephemeral=True)
        await asyncio.sleep(5)
        await bot.close()
    except Exception as e:
        await interaction.followup.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", ephemeral=True)


@bot.tree.command(name="optimize_post", description="–£–ª—É—á—à–∞–µ—Ç –†–ü-–ø–æ—Å—Ç, –ø—Ä–∏–Ω–∏–º–∞—è —Ç–µ–∫—Å—Ç –∏ —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.")
@app_commands.describe(post_text="–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.", optimization_level="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.", image="(–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
@app_commands.choices(optimization_level=[
    discord.app_commands.Choice(name="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏", value="minimal"),
    discord.app_commands.Choice(name="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", value="standard"),
    discord.app_commands.Choice(name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", value="creative"),
])
async def optimize_post(interaction: discord.Interaction, post_text: str, optimization_level: discord.app_commands.Choice[str], image: discord.Attachment = None):
    await interaction.response.defer(ephemeral=True, thinking=True)
    
    if image and (not image.content_type or not image.content_type.startswith("image/")):
        await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞:** –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.", ephemeral=True)
        return

    level_map = {"minimal": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏", "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "creative": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"}
    prompt = get_optimizer_prompt(level_map[optimization_level.value])
    
    content_to_send = [prompt, f"\n\n–ü–æ—Å—Ç –∏–≥—Ä–æ–∫–∞:\n---\n{post_text}"]
    
    if image:
        try:
            image_bytes = await image.read()
            pil_image = Image.open(io.BytesIO(image_bytes))
            content_to_send.append(pil_image)
        except Exception as e:
            await interaction.followup.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", ephemeral=True)

    try:
        response = await gemini_model.generate_content_async(content_to_send)
        result_text = response.text.strip()
        if result_text.startswith("–û–®–ò–ë–ö–ê:"):
            error_embed = discord.Embed(title="‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–±–∞—è –ª–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞!", description=result_text.replace("–û–®–ò–ë–ö–ê:", "").strip(), color=discord.Color.red())
            await interaction.followup.send(embed=error_embed, ephemeral=True)
        else:
            embed = discord.Embed(title="‚ú® –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!", color=discord.Color.gold())
            embed.add_field(name="‚ñ∂Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª:", value=f"```\n{post_text[:1000]}\n```", inline=False)
            embed.add_field(name="‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–ø—Ä–µ–≤—å—é):", value=f"{result_text[:1000]}...", inline=False)
            view = PostView(result_text)
            await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≤ /optimize_post: {e}")
        await interaction.followup.send(embed=discord.Embed(title="üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.", color=discord.Color.dark_red()), ephemeral=True)


# ‚≠ê –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê ‚≠ê
@bot.tree.command(name="generate_character", description="–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –º–∏—Ä–∞ '–í–∞–ª—å–¥–µ—Å'.")
@app_commands.describe(
    params="–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–º–æ–ª–æ–¥–∞—è —ç–ª—å—Ñ–∏–π–∫–∞, –ª—É—á–Ω–∏—Ü–∞ –∏–∑ –ª–µ—Å–æ–≤').",
    randomize="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞? (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)."
)
async def generate_character(interaction: discord.Interaction, params: str = None, randomize: bool = False):
    await interaction.response.defer(ephemeral=False, thinking=True)

    if not params and not randomize:
        await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞:** –í—ã –¥–æ–ª–∂–Ω—ã –ª–∏–±–æ –æ–ø–∏—Å–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –ª–∏–±–æ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é `randomize: True`.", ephemeral=True)
        return

    try:
        prompt = get_character_prompt()
        
        if randomize:
            user_request = "–ó–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞: –°–æ–∑–¥–∞–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∏ –ª–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –º–∏—Ä–∞ –í–∞–ª—å–¥–µ—Å."
        else:
            user_request = f"–ó–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞: –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è - '{params}'."

        response = await gemini_model.generate_content_async([prompt, user_request])
        result_text = response.text.strip()

        embed = discord.Embed(
            title="‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
            description=result_text,
            color=discord.Color.purple()
        )
        request_info = "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" if randomize else f"'{params}'"
        embed.set_footer(text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è: {interaction.user.display_name} | –ó–∞–ø—Ä–æ—Å: {request_info}")

        view = CharacterSheetView(result_text)
        await interaction.followup.send(embed=embed, view=view)

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ /generate_character: {e}")
        await interaction.followup.send(embed=discord.Embed(title="üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", description="–ú–∞—Å—Ç–µ—Ä-—Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.", color=discord.Color.dark_red()), ephemeral=True)


@bot.tree.command(name="ask_lore", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –º–∏—Ä—É, –ø—Ä–∞–≤–∏–ª–∞–º –∏ –ª–æ—Ä—É '–í–∞–ª—å–¥–µ—Å–∞'")
@app_commands.describe(question="–í–∞—à –≤–æ–ø—Ä–æ—Å –•—Ä–∞–Ω–∏—Ç–µ–ª—é –∑–Ω–∞–Ω–∏–π.")
async def ask_lore(interaction: discord.Interaction, question: str):
    await interaction.response.defer(ephemeral=False)
    try:
        prompt = get_lore_prompt()
        response = await gemini_model.generate_content_async([prompt, f"\n\n–í–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞: {question}"])
        raw_text = response.text.strip()
        
        image_file_to_send = None
        
        image_tag_match = re.search(r'\[(IMAGE_\d+)\]', raw_text)
        if image_tag_match:
            image_id = image_tag_match.group(1)
            raw_text = raw_text.replace(image_tag_match.group(0), "").strip()
            
            try:
                with open(IMAGE_MAP_FILE, 'r', encoding='utf-8') as f:
                    image_map = json.load(f)
                filename = image_map.get(image_id)
                if filename:
                    image_path = os.path.join(LORE_IMAGES_DIR, filename)
                    if os.path.exists(image_path):
                        image_file_to_send = discord.File(image_path, filename="image.png")
            except (FileNotFoundError, json.JSONDecodeError) as e:
                print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {IMAGE_MAP_FILE}: {e}")

        answer_text, sources_text = (raw_text.split("%%SOURCES%%") + [""])[:2]
        answer_text = answer_text.strip()
        sources_text = sources_text.strip()

        embed = discord.Embed(title="üìú –û—Ç–≤–µ—Ç –∏–∑ –∞—Ä—Ö–∏–≤–æ–≤ –í–∞–ª—å–¥–µ—Å–∞", description=answer_text, color=discord.Color.blue())
        embed.add_field(name="–í–∞—à –∑–∞–ø—Ä–æ—Å:", value=question, inline=False)
        if sources_text:
            embed.add_field(name="–ò—Å—Ç–æ—á–Ω–∏–∫–∏:", value=sources_text, inline=False)
        if image_file_to_send:
            embed.set_image(url="attachment://image.png")
            
        embed.set_footer(text=f"–û—Ç–≤–µ—Ç–∏–ª –•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π | –ó–∞–ø—Ä–æ—Å–∏–ª: {interaction.user.display_name}")
        
        await interaction.followup.send(embed=embed, file=image_file_to_send if image_file_to_send else discord.utils.MISSING)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ /ask_lore: {e}")
        await interaction.followup.send(embed=discord.Embed(title="üö´ –û—à–∏–±–∫–∞ –≤ –∞—Ä—Ö–∏–≤–µ", description="–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.", color=discord.Color.dark_red()), ephemeral=True)

@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.")
async def help(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", description="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ:", color=discord.Color.blue())
    embed.add_field(name="/optimize_post", value="–£–ª—É—á—à–∞–µ—Ç –≤–∞—à –†–ü-–ø–æ—Å—Ç. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç, —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", inline=False)
    embed.add_field(name="/ask_lore", value="–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –•—Ä–∞–Ω–∏—Ç–µ–ª—é –∑–Ω–∞–Ω–∏–π –ø–æ –º–∏—Ä—É '–í–∞–ª—å–¥–µ—Å–∞'. –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º –≤ –∫–∞–Ω–∞–ª–µ.", inline=False)
    # –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–ï–ö–¶–ò–Ø HELP
    embed.add_field(name="/generate_character", value="–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ.", inline=False)
    embed.add_field(name="/about", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.", inline=False)
    embed.add_field(name="/help", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", inline=False)
    embed.add_field(name="/update_lore", value="**[–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤]**\n–°–æ–±–∏—Ä–∞–µ—Ç –ª–æ—Ä –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.", inline=False)
    embed.set_footer(text="–í–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –í–∞–ª—å–¥–µ—Å–∞.")
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="about", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.")
async def about(interaction: discord.Interaction):
    embed = discord.Embed(title="–û –±–æ—Ç–µ '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –í–∞–ª—å–¥–µ—Å–∞'", description="–Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –∏–≥—Ä–æ–∫–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ '–í–∞–ª—å–¥–µ—Å'.", color=discord.Color.gold())
    embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value="**GX**", inline=True)
    embed.add_field(name="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", value="‚Ä¢ Discord.py\n‚Ä¢ Google Gemini API", inline=True)
    embed.set_footer(text=f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {interaction.guild.name}")
    await interaction.response.send_message(embed=embed, ephemeral=False)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == "__main__":
    keep_alive()
    bot.run(DISCORD_TOKEN)
