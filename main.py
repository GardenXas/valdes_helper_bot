# -*- coding: utf-8 -*-

# --- 1. –ò–ú–ü–û–†–¢–´ –ò –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ---
import discord
from discord import ui, app_commands
from discord.ext import commands, tasks
import google.generativeai as genai
import os
from dotenv import load_dotenv
from flask import Flask
from threading import Thread
from PIL import Image
import io
import json
import random
import string
from datetime import datetime, time, timezone
import sys
import asyncio
from fpdf import FPDF
from fpdf.enums import XPos, YPos
import re
import aiohttp
from fontTools.ttLib import TTFont

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MAIN_GUILD_ID = os.getenv("MAIN_GUILD_ID")
ADMIN_GUILD_ID = os.getenv("ADMIN_GUILD_ID")
CODE_CHANNEL_ID = os.getenv("CODE_CHANNEL_ID")
OWNER_USER_ID = os.getenv("OWNER_USER_ID")
LORE_CHANNEL_IDS = os.getenv("LORE_CHANNEL_IDS")

IMAGE_CACHE_DIR = "image_cache"

if not all([DISCORD_TOKEN, GEMINI_API_KEY, MAIN_GUILD_ID, ADMIN_GUILD_ID, CODE_CHANNEL_ID, OWNER_USER_ID, LORE_CHANNEL_IDS]):
    raise ValueError("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π –∏–ª–∏ ID (DISCORD_TOKEN, GEMINI_API_KEY, *_GUILD_ID, CODE_CHANNEL_ID, OWNER_USER_ID, LORE_CHANNEL_IDS) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')

# --- 2. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –§–£–ù–ö–¶–ò–ò ---
VALDES_LORE = ""

def load_lore_from_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ—Ä –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å –±–æ—Ç–∞."""
    global VALDES_LORE
    try:
        with open("file.txt", "r", encoding="utf-8") as f:
            VALDES_LORE = f.read()
        print("–õ–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç—å.")
    except FileNotFoundError:
        print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª 'file.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        VALDES_LORE = "–õ–æ—Ä –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞."

class CharacterSanitizer:
    def __init__(self, font_path):
        if not os.path.exists(font_path):
            raise FileNotFoundError(f"–§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: '{font_path}'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ª–µ–∂–∏—Ç –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ main.py.")
        try:
            font = TTFont(font_path)
            self.supported_chars = set()
            for table in font['cmap'].tables:
                if table.isUnicode(): self.supported_chars.update(table.cmap.keys())
            if not self.supported_chars: raise RuntimeError("–®—Ä–∏—Ñ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Unicode-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–∏–º–≤–æ–ª–æ–≤ (cmap).")
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —à—Ä–∏—Ñ—Ç {font_path}, –Ω–∞–π–¥–µ–Ω–æ {len(self.supported_chars)} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
            whitelist_items = {'‚ïê', '‚îÄ', '‚ïë', '‚îÇ', '‚úÖ', '‚ùå', 'üîë', '‚öôÔ∏è', '‚ñ∂Ô∏è', 'üìù', 'üìú', '‚ú®', 'üö´', '‚ö†Ô∏è', 'üåü', 'üìî', 'üß¨'}
            self.supported_chars.update(ord(char) for char in "".join(whitelist_items))
            print(f"–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞, –≤—Å–µ–≥–æ {len(self.supported_chars)} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
        except Exception as e:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ '{font_path}': {e}") from e
    def sanitize(self, text: str) -> str:
        return "".join(c if ord(c) in self.supported_chars else '?' for c in str(text))

# --- 3. –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–ú–ü–¢–´ ---
def get_optimizer_prompt(level):
    return f"""
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ '–í–∞–ª—å–¥–µ—Å'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç –∏–≥—Ä–æ–∫–∞.

**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø –ü–û–°–¢–ê (–°–ê–ú–û–ï –í–ê–ñ–ù–û–ï):**
1.  **–î–ï–ô–°–¢–í–ò–Ø:** –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏. –ü—Ä–∏–º–µ—Ä: `**–û–Ω –ø–æ–¥–Ω—è–ª—Å—è —Å –∫—Ä–æ–≤–∞—Ç–∏.**`
2.  **–ú–´–°–õ–ò –ò –ó–í–£–ö–ò:** –í—Å–µ –º—ã—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ø–µ–≤–∞–Ω–∏–µ, –º—ã—á–∞–Ω–∏–µ –∏ —Ç.–¥., –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏. –ü—Ä–∏–º–µ—Ä: `"–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å."` –∏–ª–∏ `"–ú–º–º-—Ö–º–º..."`
3.  **–†–ï–ß–¨:** –í—Å—è –ø—Ä—è–º–∞—è —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –¥–µ—Ñ–∏—Å–∞ –∏ –ø—Ä–æ–±–µ–ª–∞. –ü—Ä–∏–º–µ—Ä: `- –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.`
4.  –ö–∞–∂–¥—ã–π —Ç–∏–ø (–¥–µ–π—Å—Ç–≤–∏–µ, –º—ã—Å–ª—å, —Ä–µ—á—å) **–û–ë–Ø–ó–ê–ù** –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.

**–ó–û–õ–û–¢–´–ï –ü–†–ê–í–ò–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò:**
1.  **–ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–ï –û–¢ –¢–†–ï–¢–¨–ï–ì–û –õ–ò–¶–ê:** –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –æ—Ç **—Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞** (–û–Ω/–û–Ω–∞), –¥–∞–∂–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–ø–∏—Å–∞–ª –æ—Ç –ø–µ—Ä–≤–æ–≥–æ ('–Ø –¥–µ–ª–∞—é').
2.  **–ó–ê–ü–†–ï–¢ –ù–ê –°–ò–ú–í–û–õ–´:** –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ `** **`, `" "` –∏ `- `. –ù–∏–∫–∞–∫–∏—Ö `()`, `<<>>` –∏ –ø—Ä–æ—á–µ–≥–æ.
3.  **–ù–ï –ë–´–¢–¨ –°–û–ê–í–¢–û–†–û–ú:** –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.

**–¢–í–û–ô –ü–†–û–¶–ï–°–° –†–ê–ë–û–¢–´ (–ö–ê–ö –†–ê–ó–ë–ò–†–ê–¢–¨ –¢–ï–ö–°–¢):**
–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—à—å —Å–ª–∏—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞, —Ç—ã –¥–æ–ª–∂–µ–Ω –º—ã—Å–ª–µ–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ:
1.  –ü—Ä–æ—á–∏—Ç–∞–π –≤—Å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
2.  –ù–∞–π–¥–∏ —Å–ª–æ–≤–∞-–º–∞—Ä–∫–µ—Ä—ã —Ä–µ—á–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ "–≥–æ–≤–æ—Ä—è", "—Å–∫–∞–∑–∞–ª", "–∫—Ä–∏–∫–Ω—É–ª". –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∏—Ö ‚Äî —ç—Ç–æ –ø—Ä—è–º–∞—è —Ä–µ—á—å.
3.  –ù–∞–π–¥–∏ —Å–ª–æ–≤–∞-–º–∞—Ä–∫–µ—Ä—ã –∑–≤—É–∫–æ–≤, —Ç–∞–∫–∏–µ –∫–∞–∫ "–Ω–∞–ø–µ–≤–∞—è", "–º—ã—á–∞". –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∏—Ö ‚Äî —ç—Ç–æ –∑–≤—É–∫ –≤ –∫–∞–≤—ã—á–∫–∞—Ö.
4.  –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è.
5.  –°–æ–±–µ—Ä–∏ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –≤ –ø–æ—Å—Ç, –ø—Ä–∏–º–µ–Ω—è—è '–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø'.

**–ü–†–ò–ú–ï–† –†–ê–ó–ë–û–†–ê –°–õ–û–ñ–ù–û–ì–û –ü–û–°–¢–ê:**
*   **–¢–µ–∫—Å—Ç –∏–≥—Ä–æ–∫–∞:** `—è –≤—Å—Ç–∞—é —Å –ø–æ–ª–∞ –∏ –∏–¥—É –Ω–∞ —É–ª–∏—Ü—É –Ω–∞–ø–∏–≤–∞—è –ª—è–ª—è–ª—è –∏ –≥–æ–≤–æ—Ä—è –∫–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —ç—Ç–æ—Ç –¥–µ–Ω—å`
*   **–¢–í–û–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:**
    **–û–Ω –≤—Å—Ç–∞–µ—Ç —Å –ø–æ–ª–∞ –∏ –∏–¥–µ—Ç –Ω–∞ —É–ª–∏—Ü—É.**
    "–õ—è-–ª—è-–ª—è..."
    - –ö–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —ç—Ç–æ—Ç –¥–µ–Ω—å!

---
**–ó–ê–î–ê–ß–ê 1: –ü–†–û–í–ï–†–ö–ê –ù–ê –ì–†–£–ë–´–ï –õ–û–†–ù–´–ï –û–®–ò–ë–ö–ò**
(–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É, –º–∞–≥–∏—é –∏ —Ç.–¥. –ï—Å–ª–∏ –Ω–∞—à–µ–ª ‚Äî –≤–µ—Ä–Ω–∏ "–û–®–ò–ë–ö–ê:")

**–ó–ê–î–ê–ß–ê 2: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–û–°–¢–ê (–µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç)**
–û–±—Ä–∞–±–æ—Ç–∞–π –ø–æ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ä–æ–≤–Ω—é '{level}', —Å–æ–±–ª—é–¥–∞—è –í–°–ï –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞.

*   **–£—Ä–æ–≤–µ–Ω—å '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏':**
    *   –¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è, –º—ã—Å–ª–∏/–∑–≤—É–∫–∏ –∏ —Ä–µ—á—å –∏ **–ü–ï–†–ï–§–û–†–ú–ê–¢–ò–†–û–í–ê–¢–¨** –µ–≥–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º.
    *   –ü–µ—Ä–µ–≤–µ–¥–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç—Ä–µ—Ç—å–µ –ª–∏—Ü–æ.
    *   **–ó–ê–ü–†–ï–©–ï–ù–û** –¥–æ–±–∞–≤–ª—è—Ç—å, —É–±–∏—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–∞, –∫—Ä–æ–º–µ —Å–º–µ–Ω—ã –ª–∏—Ü–∞ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è (—è -> –æ–Ω/–æ–Ω–∞). –¢–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

*   **–£—Ä–æ–≤–µ–Ω—å '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è':**
    *   –í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫'.
    *   –ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.
    *   –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å **–û–î–ù–û** –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ —ç–º–æ—Ü–∏—é –∏–ª–∏ –¥–µ—Ç–∞–ª—å –æ–∫—Ä—É–∂–µ–Ω–∏—è.

*   **–£—Ä–æ–≤–µ–Ω—å '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å':**
    *   –í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'.
    *   –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–æ–≥–∞—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ **–∑–∞—è–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏–π**.

**–§–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ê–í–ò–õ–û:**
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–π.
"""

def get_lore_prompt():
    return f"""
–¢—ã ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π –º–∏—Ä–∞ '–í–∞–ª—å–¥–µ—Å'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–≥—Ä–æ–∫–æ–≤. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –¥–≤–∞ —ç—Ç–∞–ø–∞.

**–≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.**
–¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ –∑–Ω–∞–Ω–∏–π –∏ –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞. –í –∞—Ä—Ö–∏–≤–µ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∞ `[–°–æ–æ–±—â–µ–Ω–∏–µ: <—Ç–µ–∫—Å—Ç —Ä—è–¥–æ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π>. –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: <–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É>]`.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1.  –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏ –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞.
2.  –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ –∞—Ä—Ö–∏–≤–∞.
3.  –û–ø—Ä–µ–¥–µ–ª–∏, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ —á–µ–º—É-—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É (—Ñ–ª–∞–≥, –∫–∞—Ä—Ç–∞, –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –≥–µ—Ä–± –∏ —Ç.–¥.).
4.  –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ò —Ç—ã –Ω–∞—à–µ–ª –≤ —Ç–µ–∫—Å—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ç–µ–≥ `[–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ...]`, **–¢–í–û–ô –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –¢–û–õ–¨–ö–û –ü–£–¢–¨ –ö –§–ê–ô–õ–£ –ò–ó –¢–ï–ì–ê –ò –ë–û–õ–¨–®–ï –ù–ò–ß–ï–ì–û.** –ù–∞–ø—Ä–∏–º–µ—Ä: `image_cache/12345.jpg`.
5.  –ï—Å–ª–∏ —Ç—ã –º–æ–∂–µ—à—å —É–≤–µ—Ä–µ–Ω–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –∏–ª–∏ –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –¥–∞–π –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –∫–∞–∫ –æ–±—ã—á–Ω–æ. –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ `%%SOURCES%%–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞`.
6.  –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, –æ—Ç–≤–µ—Ç—å: "–í –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–∞—Ö –Ω–µ—Ç —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É."

**–ê—Ä—Ö–∏–≤ –∑–Ω–∞–Ω–∏–π:**
--- –ù–ê–ß–ê–õ–û –î–û–ö–£–ú–ï–ù–¢–ê –° –õ–û–†–û–ú ---
{VALDES_LORE}
--- –ö–û–ù–ï–¶ –î–û–ö–£–ú–ï–ù–¢–ê –° –õ–û–†–û–ú ---
"""

# --- 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ö–û–î –ò UI ---
app = Flask('')
@app.route('/')
def home(): return "Bot is alive and running!"
def run(): app.run(host='0.0.0.0', port=8080)
def keep_alive():
    Thread(target=run, daemon=True).start()

class OptimizedPostModal(ui.Modal, title='–í–∞—à —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ—Å—Ç'):
    def __init__(self, optimized_text: str):
        super().__init__()
        self.post_content = ui.TextInput(label="–¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é", style=discord.TextStyle.paragraph, default=optimized_text, max_length=1800)
        self.add_item(self.post_content)
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message("–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.", ephemeral=True, delete_after=3)

class PostView(ui.View):
    def __init__(self, optimized_text: str):
        super().__init__(timeout=300)
        self.optimized_text = optimized_text
    @ui.button(label="üìù –ü–æ–∫–∞–∑–∞—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", style=discord.ButtonStyle.primary)
    async def show_modal_button(self, interaction: discord.Interaction, button: ui.Button):
        modal = OptimizedPostModal(self.optimized_text)
        await interaction.response.send_modal(modal)

# --- 5. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–û–ú –î–û–°–¢–£–ü–ê ---
DAILY_ACCESS_CODE = ""
CODE_FILE = "code.json"
def save_daily_code(code):
    data = {'code': code, 'date': datetime.now().strftime('%Y-%m-%d')}
    with open(CODE_FILE, 'w') as f: json.dump(data, f)
def load_daily_code():
    global DAILY_ACCESS_CODE
    try:
        with open(CODE_FILE, 'r') as f: data = json.load(f)
        if data['date'] == datetime.now().strftime('%Y-%m-%d'):
            DAILY_ACCESS_CODE = data['code']
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {DAILY_ACCESS_CODE}")
            return
    except (FileNotFoundError, json.JSONDecodeError):
        print("–§–∞–π–ª —Å –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
    DAILY_ACCESS_CODE = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    save_daily_code(DAILY_ACCESS_CODE)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {DAILY_ACCESS_CODE}")

# --- 6. –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê –ò –°–û–ë–´–¢–ò–ô ---
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True
bot = commands.Bot(command_prefix="!", intents=intents)

async def send_access_code_to_admin_channel(code: str, title: str, description: str):
    try:
        admin_channel = bot.get_channel(int(CODE_CHANNEL_ID))
        if admin_channel:
            embed = discord.Embed(title=title, description=description, color=discord.Color.gold(), timestamp=datetime.now())
            embed.add_field(name="–ö–æ–¥", value=f"```{code}```")
            embed.set_footer(text="–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ –∫–æ–Ω—Ü–∞ —Å—É—Ç–æ–∫ (UTC).")
            await admin_channel.send(embed=embed)
        else: print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å ID {CODE_CHANNEL_ID}.")
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")

@tasks.loop(time=time(hour=0, minute=0, tzinfo=timezone.utc))
async def update_code_task():
    global DAILY_ACCESS_CODE
    DAILY_ACCESS_CODE = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    save_daily_code(DAILY_ACCESS_CODE)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥: {DAILY_ACCESS_CODE}")
    await send_access_code_to_admin_channel(
        code=DAILY_ACCESS_CODE, title="üîë –ù–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞",
        description=f"–ö–æ–¥ –¥–ª—è `/update_lore` –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞:")
@update_code_task.before_loop
async def before_update_code_task(): await bot.wait_until_ready()

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    if not os.path.exists(IMAGE_CACHE_DIR):
        os.makedirs(IMAGE_CACHE_DIR)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {IMAGE_CACHE_DIR}")
    
    load_lore_from_file()
    load_daily_code()
    if not update_code_task.is_running(): update_code_task.start()
    await send_access_code_to_admin_channel(
        code=DAILY_ACCESS_CODE, title="‚öôÔ∏è –¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ (–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)",
        description="–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

def robust_markdown_to_html(text: str) -> str:
    text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    text = re.sub(r'\*\*\*(.+?)\*\*\*', r'<b><i>\1</i></b>', text)
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'__(.+?)__', r'<u>\1</u>', text)
    return text.replace('\n', '<br/>')

# --- 7. –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ---

@bot.tree.command(name="update_lore", description="[–ê–î–ú–ò–ù] –°–æ–±–∏—Ä–∞–µ—Ç –ª–æ—Ä –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
@app_commands.describe(access_code="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞")
async def update_lore(interaction: discord.Interaction, access_code: str):
    if not (str(interaction.user.id) == OWNER_USER_ID or interaction.user.guild_permissions.administrator):
        return await interaction.response.send_message("‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", ephemeral=True)
    if str(interaction.guild.id) != MAIN_GUILD_ID:
        return await interaction.response.send_message("‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
    if access_code != DAILY_ACCESS_CODE:
        return await interaction.response.send_message("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.**", ephemeral=True)
        
    await interaction.response.defer(ephemeral=True, thinking=True)
    
    try:
        channel_ids = [int(id.strip()) for id in LORE_CHANNEL_IDS.split(',')]
    except ValueError:
        return await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** LORE_CHANNEL_IDS –≤ .env —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.", ephemeral=True)
    
    if os.path.exists(IMAGE_CACHE_DIR):
        for f in os.listdir(IMAGE_CACHE_DIR):
            os.remove(os.path.join(IMAGE_CACHE_DIR, f))
        print("–°—Ç–∞—Ä—ã–π –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω.")
    
    pdf = FPDF()
    sanitizer = None
    try:
        font_path = 'GalindoCyrillic-Regular.ttf'
        sanitizer = CharacterSanitizer(font_path)
        pdf.add_font('Galindo', '', font_path)
        pdf.add_font('Galindo', 'B', font_path)
        pdf.add_font('Galindo', 'I', font_path)
        pdf.add_font('Galindo', 'BI', font_path)
    except Exception as e:
        return await interaction.followup.send(f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ —à—Ä–∏—Ñ—Ç–æ–º:**\n{e}", ephemeral=True)
    
    pdf.set_font('Galindo', '', 12)
    full_lore_text_for_memory = ""
    parsed_channels_count, total_messages_count, total_images_count = 0, 0, 0
    
    channels_to_parse = [bot.get_channel(cid) for cid in channel_ids if bot.get_channel(cid) and isinstance(bot.get_channel(cid), (discord.TextChannel, discord.ForumChannel))]
    sorted_channels = sorted(channels_to_parse, key=lambda c: c.position)

    async with aiohttp.ClientSession() as session:
        async def process_and_cache_image(image_bytes: bytes, message: discord.Message, attachment_num: int):
            nonlocal full_lore_text_for_memory, total_images_count
            try:
                filename = f"{message.channel.id}_{message.id}_{attachment_num}.jpg"
                filepath = os.path.join(IMAGE_CACHE_DIR, filename)
                img = Image.open(io.BytesIO(image_bytes))
                if img.mode in ('RGBA', 'P', 'LA'): img = img.convert('RGB')
                img.save(filepath, format='JPEG', quality=80, optimize=True)
                
                message_content_cleaned = re.sub(r'<@!?\d+>', '', message.content).strip().replace('\n', ' ')
                full_lore_text_for_memory += f"\n[–°–æ–æ–±—â–µ–Ω–∏–µ: {message_content_cleaned}. –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filepath}]\n"
                
                page_width = pdf.w - pdf.l_margin - pdf.r_margin
                img_width = page_width
                img_height = page_width * (img.height / img.width)
                pdf.image(filepath, w=img_width, h=img_height)
                pdf.ln(5)
                total_images_count += 1
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

        for channel in sorted_channels:
            pdf.add_page()
            pdf.set_font('Galindo', 'B', 16)
            pdf.cell(0, 10, sanitizer.sanitize(f'–ö–∞–Ω–∞–ª: {channel.name}'), new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
            pdf.ln(10)
            full_lore_text_for_memory += f"\n--- –ù–ê–ß–ê–õ–û –ö–ê–ù–ê–õ–ê: {channel.name} ---\n\n"
            
            async def process_message(message: discord.Message):
                nonlocal total_messages_count, full_lore_text_for_memory
                
                if message.content and not message.attachments: # –ß–∏—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    full_lore_text_for_memory += message.content + "\n\n"
                    pdf.set_font('Galindo', '', 12)
                    pdf.write_html(robust_markdown_to_html(sanitizer.sanitize(message.content)))
                    pdf.ln(5)
                
                attachment_counter = 0
                if message.attachments:
                    for attachment in message.attachments:
                        if attachment.content_type and attachment.content_type.startswith('image/'):
                            await process_and_cache_image(await attachment.read(), message, attachment_counter)
                            attachment_counter += 1
                
                if message.embeds:
                    for embed in message.embeds:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —ç–º–±–µ–¥–∞—Ö
                        # ...
                        if embed.image.url:
                             async with session.get(embed.image.url) as resp:
                                if resp.status == 200:
                                    await process_and_cache_image(await resp.read(), message, attachment_counter)
                                    attachment_counter += 1
                
                total_messages_count += 1

            if isinstance(channel, discord.ForumChannel):
                all_threads = channel.threads + [t async for t in channel.archived_threads(limit=None)]
                for thread in sorted(all_threads, key=lambda t: t.created_at):
                    async for message in thread.history(limit=500, oldest_first=True):
                        await process_message(message)
            else:
                async for message in channel.history(limit=500, oldest_first=True):
                    await process_message(message)
            
            full_lore_text_for_memory += f"--- –ö–û–ù–ï–¶ –ö–ê–ù–ê–õ–ê: {channel.name} ---\n"
            parsed_channels_count += 1

    try:
        pdf_output_filename = "lore.pdf"
        pdf.output(pdf_output_filename)
        with open("file.txt", "w", encoding="utf-8") as f: f.write(full_lore_text_for_memory)
        load_lore_from_file()
        
        pdf_size_mb = os.path.getsize(pdf_output_filename) / (1024 * 1024)
        embed = discord.Embed(title="‚úÖ –õ–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω!", description=f"–§–∞–π–ª `{pdf_output_filename}` —Å–æ–∑–¥–∞–Ω. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", color=discord.Color.green())
        embed.add_field(name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤", value=str(parsed_channels_count), inline=True)
        embed.add_field(name="–°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π", value=str(total_messages_count), inline=True)
        embed.add_field(name="–ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", value=str(total_images_count), inline=True)
        embed.add_field(name="–†–∞–∑–º–µ—Ä PDF", value=f"{pdf_size_mb:.2f} –ú–ë", inline=True)
        
        file_to_send = discord.File(pdf_output_filename) if pdf_size_mb < 24 else None
        content_warning = "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –†–∞–∑–º–µ—Ä PDF > 25 –ú–ë. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω." if not file_to_send else ""
        
        await interaction.followup.send(content=content_warning, embed=embed, file=file_to_send, ephemeral=True)

        await interaction.followup.send("‚úÖ **–õ–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω.** –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...", ephemeral=True)
        await asyncio.sleep(5)
        sys.exit(0) # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        
    except Exception as e:
        await interaction.followup.send(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", ephemeral=True)


@bot.tree.command(name="ask_lore", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –º–∏—Ä—É, –ø—Ä–∞–≤–∏–ª–∞–º –∏ –ª–æ—Ä—É '–í–∞–ª—å–¥–µ—Å–∞'")
@app_commands.describe(question="–í–∞—à –≤–æ–ø—Ä–æ—Å –•—Ä–∞–Ω–∏—Ç–µ–ª—é –∑–Ω–∞–Ω–∏–π.")
async def ask_lore(interaction: discord.Interaction, question: str):
    await interaction.response.defer(ephemeral=False)
    try:
        prompt_step1 = get_lore_prompt()
        response_step1 = await gemini_model.generate_content_async([prompt_step1, f"\n\n–í–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞: {question}"])
        first_pass_text = response_step1.text.strip()

        final_answer, sources_text = "", ""
        
        if first_pass_text.startswith(IMAGE_CACHE_DIR) and os.path.exists(first_pass_text):
            image_path = first_pass_text
            await interaction.edit_original_response(content="*–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –∞—Ä—Ö–∏–≤—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...*")
            
            try:
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∞–Ω–∞–ª–∏–∑.")
                img = Image.open(image_path)
                prompt_step2 = "–¢—ã –•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π. –û–ø–∏—Ä–∞—è—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞ –∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç."
                response_step2 = await gemini_model.generate_content_async([prompt_step2, f"–í–æ–ø—Ä–æ—Å: {question}", img])
                final_answer = response_step2.text.strip()
            except Exception as img_e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ 2-–º —ç—Ç–∞–ø–µ: {img_e}")
                final_answer = "–Ø –Ω–∞—à–µ–ª –Ω—É–∂–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤–µ, –Ω–æ –Ω–µ —Å–º–æ–≥ –µ–≥–æ –ø—Ä–æ—á–µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."
        else:
            raw_text = first_pass_text
            if "%%SOURCES%%" in raw_text:
                parts = raw_text.split("%%SOURCES%%")
                final_answer = parts[0].strip()
                sources_text = parts[1].strip()
            else:
                final_answer = raw_text

        embed = discord.Embed(title="üìú –û—Ç–≤–µ—Ç –∏–∑ –∞—Ä—Ö–∏–≤–æ–≤ –í–∞–ª—å–¥–µ—Å–∞", description=final_answer, color=discord.Color.blue())
        embed.add_field(name="–í–∞—à –∑–∞–ø—Ä–æ—Å:", value=question, inline=False)
        if sources_text: embed.add_field(name="–ò—Å—Ç–æ—á–Ω–∏–∫–∏:", value=sources_text, inline=False)
        embed.set_footer(text=f"–û—Ç–≤–µ—Ç–∏–ª –•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π | –ó–∞–ø—Ä–æ—Å–∏–ª: {interaction.user.display_name}")
        await interaction.edit_original_response(content=None, embed=embed)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /ask_lore: {e}")
        await interaction.edit_original_response(content=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


@bot.tree.command(name="optimize_post", description="–£–ª—É—á—à–∞–µ—Ç –†–ü-–ø–æ—Å—Ç, –ø—Ä–∏–Ω–∏–º–∞—è —Ç–µ–∫—Å—Ç –∏ —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.")
@app_commands.describe(post_text="–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.", optimization_level="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.", image="(–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
@app_commands.choices(optimization_level=[
    discord.app_commands.Choice(name="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏", value="minimal"),
    discord.app_commands.Choice(name="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", value="standard"),
    discord.app_commands.Choice(name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", value="creative"),
])
async def optimize_post(interaction: discord.Interaction, post_text: str, optimization_level: discord.app_commands.Choice[str], image: discord.Attachment = None):
    await interaction.response.defer(ephemeral=True, thinking=True)
    if image and (not image.content_type or not image.content_type.startswith("image/")):
        return await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞:** –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.", ephemeral=True)

    level_map = {"minimal": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏", "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "creative": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"}
    prompt = get_optimizer_prompt(level_map[optimization_level.value])
    content_to_send = [prompt, f"\n\n–ü–æ—Å—Ç –∏–≥—Ä–æ–∫–∞:\n---\n{post_text}"]
    
    if image:
        try:
            content_to_send.append(Image.open(io.BytesIO(await image.read())))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await interaction.followup.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç –±–µ–∑ –Ω–µ–≥–æ.", ephemeral=True)

    try:
        response = await gemini_model.generate_content_async(content_to_send)
        result_text = response.text.strip()

        if result_text.startswith("–û–®–ò–ë–ö–ê:"):
            error_embed = discord.Embed(title="‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–±–∞—è –ª–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞!", description=result_text.replace("–û–®–ò–ë–ö–ê:", "").strip(), color=discord.Color.red())
            await interaction.followup.send(embed=error_embed, ephemeral=True)
        else:
            embed = discord.Embed(title="‚ú® –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!", color=discord.Color.gold())
            embed.add_field(name="‚ñ∂Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª:", value=f"```\n{post_text[:1000]}\n```", inline=False)
            embed.add_field(name="‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–ø—Ä–µ–≤—å—é):", value=f"{result_text[:1000]}...", inline=False)
            embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç.")
            await interaction.followup.send(embed=embed, view=PostView(result_text), ephemeral=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /optimize_post: {e}")
        await interaction.followup.send(embed=discord.Embed(title="üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", color=discord.Color.dark_red()), ephemeral=True)


@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.")
async def help(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", description="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ:", color=discord.Color.blue())
    embed.add_field(name="/optimize_post", value="–£–ª—É—á—à–∞–µ—Ç –≤–∞—à –†–ü-–ø–æ—Å—Ç. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç, —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", inline=False)
    embed.add_field(name="/ask_lore", value="–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –•—Ä–∞–Ω–∏—Ç–µ–ª—é –∑–Ω–∞–Ω–∏–π –ø–æ –º–∏—Ä—É '–í–∞–ª—å–¥–µ—Å–∞'. –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º –≤ –∫–∞–Ω–∞–ª–µ.", inline=False)
    embed.add_field(name="/about", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.", inline=False)
    embed.add_field(name="/help", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", inline=False)
    embed.add_field(name="/update_lore", value="**[–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤]**\n–°–æ–±–∏—Ä–∞–µ—Ç –ª–æ—Ä –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.", inline=False)
    embed.set_footer(text="–í–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –í–∞–ª—å–¥–µ—Å–∞.")
    await interaction.response.send_message(embed=embed, ephemeral=True)


@bot.tree.command(name="about", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.")
async def about(interaction: discord.Interaction):
    embed = discord.Embed(title="–û –±–æ—Ç–µ '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –í–∞–ª—å–¥–µ—Å–∞'", description="–Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –∏–≥—Ä–æ–∫–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ '–í–∞–ª—å–¥–µ—Å'.\n\n–ú–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–µ–ª–∞—Ç—å –≤–∞—à–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–∏—Ä –±–æ–ª–µ–µ –≥–ª–∞–¥–∫–∏–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª–æ—Ä—É –∏ –ø–æ–º–æ–≥–∞—è —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤.", color=discord.Color.gold())
    embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value="**GX**", inline=True)
    embed.add_field(name="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", value="‚Ä¢ Discord.py\n‚Ä¢ Google Gemini API", inline=True)
    embed.set_footer(text=f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {interaction.guild.name}")
    await interaction.response.send_message(embed=embed, ephemeral=False)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == "__main__":
    keep_alive()
    bot.run(DISCORD_TOKEN)
