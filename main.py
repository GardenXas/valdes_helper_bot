# -*- coding: utf-8 -*-

# --- 1. –ò–ú–ü–û–†–¢–´ –ò –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ---
import discord
from discord import ui, app_commands
from discord.ext import commands, tasks
import google.generativeai as genai
import os
from dotenv import load_dotenv
from flask import Flask
from threading import Thread
from PIL import Image
import io
import json
import random
import string
from datetime import datetime, time, timezone
import sys
import asyncio
from fpdf import FPDF
from fpdf.enums import XPos, YPos
import re
import aiohttp
from fontTools.ttLib import TTFont

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MAIN_GUILD_ID = os.getenv("MAIN_GUILD_ID")
ADMIN_GUILD_ID = os.getenv("ADMIN_GUILD_ID")
CODE_CHANNEL_ID = os.getenv("CODE_CHANNEL_ID")
OWNER_USER_ID = os.getenv("OWNER_USER_ID")
LORE_CHANNEL_IDS = os.getenv("LORE_CHANNEL_IDS")

# <<<--- –ù–û–í–û–ï: –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
LORE_PDF_PATH = "lore.pdf"
IMAGE_MAP_PATH = "image_map.json"
# --- –ù–û–í–û–ï --->

if not all([DISCORD_TOKEN, GEMINI_API_KEY, MAIN_GUILD_ID, ADMIN_GUILD_ID, CODE_CHANNEL_ID, OWNER_USER_ID, LORE_CHANNEL_IDS]):
    raise ValueError("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π –∏–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

try:
    CODE_CHANNEL_ID = int(CODE_CHANNEL_ID)
    OWNER_USER_ID = int(OWNER_USER_ID)
except ValueError:
    raise ValueError("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: CODE_CHANNEL_ID –∏ OWNER_USER_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')

# --- 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ –ò –§–£–ù–ö–¶–ò–ò ---
class CharacterSanitizer:
    def __init__(self, font_path):
        if not os.path.exists(font_path): raise FileNotFoundError(f"–§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: '{font_path}'.")
        try:
            font = TTFont(font_path)
            self.supported_chars = set(key for table in font['cmap'].tables if table.isUnicode() for key in table.cmap.keys())
            if not self.supported_chars: raise RuntimeError("–®—Ä–∏—Ñ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Unicode-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–∏–º–≤–æ–ª–æ–≤.")
            whitelist = {'‚ïê', '‚îÄ', '‚ïë', '‚îÇ', '‚úÖ', '‚ùå', 'üîë', '‚öôÔ∏è', '‚ñ∂Ô∏è', 'üìù', 'üìú', '‚ú®', 'üö´', '‚ö†Ô∏è', 'üåü', 'üìî', 'üß¨', '[', ']', ':', '_'}
            self.supported_chars.update(ord(c) for c in "".join(whitelist))
        except Exception as e:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ '{font_path}': {e}") from e
    def sanitize(self, text: str) -> str:
        return "".join(c if ord(c) in self.supported_chars else '?' for c in str(text))

def get_optimizer_prompt(level):
    return f"""
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ '–í–∞–ª—å–¥–µ—Å'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç –∏–≥—Ä–æ–∫–∞.

**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø –ü–û–°–¢–ê (–°–ê–ú–û–ï –í–ê–ñ–ù–û–ï):**
1.  **–î–ï–ô–°–¢–í–ò–Ø:** –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏. –ü—Ä–∏–º–µ—Ä: `**–û–Ω –ø–æ–¥–Ω—è–ª—Å—è —Å –∫—Ä–æ–≤–∞—Ç–∏.**`
2.  **–ú–´–°–õ–ò –ò –ó–í–£–ö–ò:** –í—Å–µ –º—ã—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ø–µ–≤–∞–Ω–∏–µ, –º—ã—á–∞–Ω–∏–µ –∏ —Ç.–¥., –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏. –ü—Ä–∏–º–µ—Ä: `"–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å."` –∏–ª–∏ `"–ú–º–º-—Ö–º–º..."`
3.  **–†–ï–ß–¨:** –í—Å—è –ø—Ä—è–º–∞—è —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –¥–µ—Ñ–∏—Å–∞ –∏ –ø—Ä–æ–±–µ–ª–∞. –ü—Ä–∏–º–µ—Ä: `- –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.`
4.  –ö–∞–∂–¥—ã–π —Ç–∏–ø (–¥–µ–π—Å—Ç–≤–∏–µ, –º—ã—Å–ª—å, —Ä–µ—á—å) **–û–ë–Ø–ó–ê–ù** –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.

**–ó–û–õ–û–¢–´–ï –ü–†–ê–í–ò–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò:**
1.  **–ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–ï –û–¢ –¢–†–ï–¢–¨–ï–ì–û –õ–ò–¶–ê:** –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –æ—Ç **—Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞** (–û–Ω/–û–Ω–∞), –¥–∞–∂–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–ø–∏—Å–∞–ª –æ—Ç –ø–µ—Ä–≤–æ–≥–æ ('–Ø –¥–µ–ª–∞—é').
2.  **–ó–ê–ü–†–ï–¢ –ù–ê –°–ò–ú–í–û–õ–´:** –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ `** **`, `" "` –∏ `- `. –ù–∏–∫–∞–∫–∏—Ö `()`, `<<>>` –∏ –ø—Ä–æ—á–µ–≥–æ.
3.  **–ù–ï –ë–´–¢–¨ –°–û–ê–í–¢–û–†–û–ú:** –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.

**–¢–í–û–ô –ü–†–û–¶–ï–°–° –†–ê–ë–û–¢–´ (–ö–ê–ö –†–ê–ó–ë–ò–†–ê–¢–¨ –¢–ï–ö–°–¢):**
–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—à—å —Å–ª–∏—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞, —Ç—ã –¥–æ–ª–∂–µ–Ω –º—ã—Å–ª–µ–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ:
1.  –ü—Ä–æ—á–∏—Ç–∞–π –≤—Å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
2.  –ù–∞–π–¥–∏ —Å–ª–æ–≤–∞-–º–∞—Ä–∫–µ—Ä—ã —Ä–µ—á–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ "–≥–æ–≤–æ—Ä—è", "—Å–∫–∞–∑–∞–ª", "–∫—Ä–∏–∫–Ω—É–ª". –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∏—Ö ‚Äî —ç—Ç–æ –ø—Ä—è–º–∞—è —Ä–µ—á—å.
3.  –ù–∞–π–¥–∏ —Å–ª–æ–≤–∞-–º–∞—Ä–∫–µ—Ä—ã –∑–≤—É–∫–æ–≤, —Ç–∞–∫–∏–µ –∫–∞–∫ "–Ω–∞–ø–µ–≤–∞—è", "–º—ã—á–∞". –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∏—Ö ‚Äî —ç—Ç–æ –∑–≤—É–∫ –≤ –∫–∞–≤—ã—á–∫–∞—Ö.
4.  –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è.
5.  –°–æ–±–µ—Ä–∏ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –≤ –ø–æ—Å—Ç, –ø—Ä–∏–º–µ–Ω—è—è '–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø'.

**–ü–†–ò–ú–ï–† –†–ê–ó–ë–û–†–ê –°–õ–û–ñ–ù–û–ì–û –ü–û–°–¢–ê:**
*   **–¢–µ–∫—Å—Ç –∏–≥—Ä–æ–∫–∞:** `—è –≤—Å—Ç–∞—é —Å –ø–æ–ª–∞ –∏ –∏–¥—É –Ω–∞ —É–ª–∏—Ü—É –Ω–∞–ø–∏–≤–∞—è –ª—è–ª—è–ª—è –∏ –≥–æ–≤–æ—Ä—è –∫–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —ç—Ç–æ—Ç –¥–µ–Ω—å`
*   **–¢–í–û–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:**
    **–û–Ω –≤—Å—Ç–∞–µ—Ç —Å –ø–æ–ª–∞ –∏ –∏–¥–µ—Ç –Ω–∞ —É–ª–∏—Ü—É.**
    "–õ—è-–ª—è-–ª—è..."
    - –ö–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —ç—Ç–æ—Ç –¥–µ–Ω—å!

---
**–ó–ê–î–ê–ß–ê 1: –ü–†–û–í–ï–†–ö–ê –ù–ê –ì–†–£–ë–´–ï –õ–û–†–ù–´–ï –û–®–ò–ë–ö–ò**
(–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É, –º–∞–≥–∏—é –∏ —Ç.–¥. –ï—Å–ª–∏ –Ω–∞—à–µ–ª ‚Äî –≤–µ—Ä–Ω–∏ "–û–®–ò–ë–ö–ê:")

**–ó–ê–î–ê–ß–ê 2: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–û–°–¢–ê (–µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç)**
–û–±—Ä–∞–±–æ—Ç–∞–π –ø–æ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ä–æ–≤–Ω—é '{level}', —Å–æ–±–ª—é–¥–∞—è –í–°–ï –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞.

*   **–£—Ä–æ–≤–µ–Ω—å '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏':**
    *   –¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è, –º—ã—Å–ª–∏/–∑–≤—É–∫–∏ –∏ —Ä–µ—á—å –∏ **–ü–ï–†–ï–§–û–†–ú–ê–¢–ò–†–û–í–ê–¢–¨** –µ–≥–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º.
    *   –ü–µ—Ä–µ–≤–µ–¥–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç—Ä–µ—Ç—å–µ –ª–∏—Ü–æ.
    *   **–ó–ê–ü–†–ï–©–ï–ù–û** –¥–æ–±–∞–≤–ª—è—Ç—å, —É–±–∏—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–∞, –∫—Ä–æ–º–µ —Å–º–µ–Ω—ã –ª–∏—Ü–∞ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è (—è -> –æ–Ω/–æ–Ω–∞). –¢–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

*   **–£—Ä–æ–≤–µ–Ω—å '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è':**
    *   –í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫'.
    *   –ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.
    *   –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å **–û–î–ù–û** –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ —ç–º–æ—Ü–∏—é –∏–ª–∏ –¥–µ—Ç–∞–ª—å –æ–∫—Ä—É–∂–µ–Ω–∏—è.

*   **–£—Ä–æ–≤–µ–Ω—å '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å':**
    *   –í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'.
    *   –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–æ–≥–∞—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ **–∑–∞—è–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏–π**.

**–§–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ê–í–ò–õ–û:**
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–π.
"""

# <<<--- –ù–û–í–û–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –•—Ä–∞–Ω–∏—Ç–µ–ª—è
def get_lore_prompt():
    return """
–¢—ã ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π –º–∏—Ä–∞ '–í–∞–ª—å–¥–µ—Å'. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω PDF-–¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–µ—Å—å –ª–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.

**–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞:** –î–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞.

---
**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê –ê–ù–ê–õ–ò–ó–ê –ò –û–¢–í–ï–¢–ê:**

1.  **–ù–ê–ô–î–ò –†–ï–õ–ï–í–ê–ù–¢–ù–´–ô –¢–ï–ö–°–¢:** –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–∞–π–¥–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞.

2.  **–†–ê–ë–û–¢–ê –° –¢–ï–ì–ê–ú–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:**
    *   –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–≥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: `[ref_img: 112233445566778899]`.
    *   –≠—Ç–æ—Ç —Ç–µ–≥ ‚Äî –Ω–µ –¥–ª—è —Ç–µ–±—è, –∞ –¥–ª—è –±–æ—Ç–∞. –û–Ω –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫ –¥–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞.
    *   –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–±–æ–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–∫–æ–π —Ç–µ–≥, —Ç—ã **–û–ë–Ø–ó–ê–ù** –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç **–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô**, –≤ —Ç–æ–º –∂–µ –≤–∏–¥–µ.

3.  **–°–°–´–õ–ê–ô–°–Ø –ù–ê –ò–°–¢–û–ß–ù–ò–ö:** –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –≤–∏–¥–∞ `–ò—Å—Ç–æ—á–Ω–∏–∫: –ö–∞–Ω–∞–ª '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'`. –í —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ —Ç—ã **–û–ë–Ø–ó–ê–ù** —É–∫–∞–∑–∞—Ç—å, –∏–∑ –∫–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü—Ä–∏–º–µ—Ä: "–°–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ '–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞', ..."

4.  **–ë–£–î–¨ –ß–ï–°–¢–ù–´–ú:** –ï—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

**–ü—Ä–∏–º–µ—Ä —Ç–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –æ –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –î–∂—É—Ä–∞):**

"–°–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ '–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞', –§–µ–¥–µ—Ä–∞—Ü–∏—è –î–∂—É—Ä–∞ ‚Äî —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∞, –æ–±–∏—Ç–∞—é—â–∞—è –Ω–∞ –≤–æ—Å—Ç–æ–∫–µ. –û–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –º–æ–ª–æ–¥–æ–π –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω. [ref_img: 998877665544332211]"
"""
# --- –ù–û–í–û–ï --->

def robust_markdown_to_html(text: str) -> str:
    text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    text = re.sub(r'\*\*\*(.+?)\*\*\*', r'<b><i>\1</i></b>', text)
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'__(.+?)__', r'<u>\1</u>', text)
    return text.replace('\n', '<br/>')

app = Flask('')
@app.route('/')
def home(): return "Bot is alive and running!"
def run(): app.run(host='0.0.0.0', port=8080)
def keep_alive(): Thread(target=run, daemon=True).start()

class OptimizedPostModal(ui.Modal, title='–í–∞—à —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ—Å—Ç'):
    def __init__(self, optimized_text: str):
        super().__init__()
        self.post_content = ui.TextInput(label="–¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é", style=discord.TextStyle.paragraph, default=optimized_text, max_length=1800)
        self.add_item(self.post_content)
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message("–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.", ephemeral=True, delete_after=3)

class PostView(ui.View):
    def __init__(self, optimized_text: str):
        super().__init__(timeout=300)
        self.optimized_text = optimized_text
    @ui.button(label="üìù –ü–æ–∫–∞–∑–∞—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", style=discord.ButtonStyle.primary)
    async def show_modal_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(OptimizedPostModal(self.optimized_text))

DAILY_ACCESS_CODE, CODE_FILE = "", "code.json"
def save_daily_code(code):
    with open(CODE_FILE, 'w') as f: json.dump({'code': code, 'date': datetime.now().strftime('%Y-%m-%d')}, f)

def load_daily_code():
    global DAILY_ACCESS_CODE
    try:
        with open(CODE_FILE, 'r') as f: data = json.load(f)
        if data['date'] == datetime.now().strftime('%Y-%m-%d'):
            DAILY_ACCESS_CODE = data['code']; print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {DAILY_ACCESS_CODE}"); return
    except (FileNotFoundError, json.JSONDecodeError): pass
    DAILY_ACCESS_CODE = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8)); save_daily_code(DAILY_ACCESS_CODE); print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–¥: {DAILY_ACCESS_CODE}")

intents = discord.Intents.default(); intents.message_content = True; intents.guilds = True
bot = commands.Bot(command_prefix="!", intents=intents)

# --- 3. –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –°–û–ë–´–¢–ò–Ø –ë–û–¢–ê ---
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!');
    load_daily_code()
    send_daily_code_task.start()
    try:
        synced = await bot.tree.sync(); print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

@bot.tree.error
async def on_tree_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CommandOnCooldown):
        seconds = int(error.retry_after)
        minutes = seconds // 60
        seconds %= 60
        
        cooldown_message = f"‚è≥ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ "
        if minutes > 0:
            cooldown_message += f"{minutes} –º–∏–Ω. "
        if seconds > 0:
            cooldown_message += f"{seconds} —Å–µ–∫."

        await interaction.response.send_message(cooldown_message, ephemeral=True)
    else:
        print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ slash-–∫–æ–º–∞–Ω–¥–µ: {error}")
        try:
            await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        except discord.errors.InteractionResponded:
            await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)

SCHEDULED_TIME = time(hour=4, minute=0, tzinfo=timezone.utc)

@tasks.loop(time=SCHEDULED_TIME)
async def send_daily_code_task():
    global DAILY_ACCESS_CODE
    DAILY_ACCESS_CODE = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    save_daily_code(DAILY_ACCESS_CODE)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥: {DAILY_ACCESS_CODE}")
    try:
        channel = bot.get_channel(CODE_CHANNEL_ID)
        if channel:
            embed = discord.Embed(
                title="üîë –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞",
                description="–ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/update_lore` –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
                color=discord.Color.dark_blue(),
                timestamp=datetime.now()
            )
            embed.add_field(name="–ö–æ–¥", value=f"```{DAILY_ACCESS_CODE}```")
            embed.set_footer(text="–≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞.")
            await channel.send(embed=embed)
            print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª '{channel.name}'.")
        else:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–∞–Ω–∞–ª –¥–ª—è –∫–æ–¥–∞ —Å ID {CODE_CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")

@send_daily_code_task.before_loop
async def before_send_daily_code_task():
    await bot.wait_until_ready()
    print("–¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")

# <<<--- –ù–û–í–û–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ update_lore
@bot.tree.command(name="update_lore", description="[–ê–î–ú–ò–ù] –°–æ–±–∏—Ä–∞–µ—Ç –ª–æ—Ä –≤ PDF, —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º.")
@app_commands.describe(access_code="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞")
async def update_lore(interaction: discord.Interaction, access_code: str):
    if not (interaction.user.id == OWNER_USER_ID or interaction.user.guild_permissions.administrator):
        return await interaction.response.send_message("‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", ephemeral=True)
    if access_code != DAILY_ACCESS_CODE:
        return await interaction.response.send_message("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.**", ephemeral=True)
        
    await interaction.response.defer(ephemeral=True, thinking=True)
    
    try: channel_ids = [int(id.strip()) for id in LORE_CHANNEL_IDS.split(',')]
    except ValueError: return await interaction.followup.send("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: LORE_CHANNEL_IDS.", ephemeral=True)
    
    pdf, sanitizer = FPDF(), None
    try:
        font_path = 'GalindoCyrillic-Regular.ttf'
        sanitizer = CharacterSanitizer(font_path)
        pdf.add_font('Galindo', '', font_path)
        pdf.add_font('Galindo', 'B', font_path)
        pdf.add_font('Galindo', 'I', font_path)
        pdf.add_font('Galindo', 'BI', font_path)
    except Exception as e: return await interaction.followup.send(f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ —à—Ä–∏—Ñ—Ç–æ–º:**\n{e}", ephemeral=True)
    
    total_messages_count, total_images_count = 0, 0
    image_map = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏ URL –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    channels_to_parse = [bot.get_channel(cid) for cid in channel_ids if bot.get_channel(cid)]
    sorted_channels = sorted(channels_to_parse, key=lambda c: c.position)

    async with aiohttp.ClientSession() as session:
        async def process_message(message: discord.Message):
            nonlocal total_messages_count, total_images_count, image_map
            
            # --- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ---
            image_urls = []
            if message.attachments:
                image_urls.extend(att.url for att in message.attachments if att.content_type and att.content_type.startswith('image/'))
            if message.embeds:
                image_urls.extend(embed.image.url for embed in message.embeds if embed.image.url)

            # --- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤ –Ω–µ–º –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ ---
            if not message.content and not image_urls:
                return

            if message.author.bot: return

            # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–∞–Ω–∞–ª–æ–º ---
            pdf.set_fill_color(240, 240, 240)
            pdf.set_font('Galindo', 'I', 8)
            channel_name = message.channel.name if hasattr(message.channel, 'name') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–¥"
            sanitized_channel_name = sanitizer.sanitize(f"–ò—Å—Ç–æ—á–Ω–∏–∫: –ö–∞–Ω–∞–ª '{channel_name}'")
            pdf.cell(0, 5, sanitized_channel_name, new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='L', fill=True)
            pdf.ln(2)
            
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
            if message.content:
                pdf.set_font('Galindo', '', 12)
                sanitized_content = sanitizer.sanitize(message.content)
                pdf.write_html(robust_markdown_to_html(sanitized_content))
                pdf.ln(1) # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø
            
            # --- –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥ –≤ PDF ---
            if image_urls:
                image_map[str(message.id)] = image_urls
                pdf.set_font('Galindo', 'I', 9)
                pdf.set_text_color(150, 150, 150)
                pdf.cell(0, 5, sanitizer.sanitize(f"[ref_img: {message.id}]"), new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_text_color(0, 0, 0)
                total_images_count += len(image_urls)
            
            pdf.ln(4) # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            total_messages_count += 1

        for channel in sorted_channels:
            if not channel:
                print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö–∞–Ω–∞–ª –∏–∑ LORE_CHANNEL_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue
            pdf.add_page(); pdf.set_font('Galindo', 'B', 16)
            pdf.cell(0, 10, sanitizer.sanitize(f'–°–±–æ—Ä–Ω–∏–∫ –õ–æ—Ä–∞: {channel.name}'), new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C'); pdf.ln(10)
            
            if isinstance(channel, discord.ForumChannel):
                all_threads = channel.threads + [t async for t in channel.archived_threads(limit=None)]
                for thread in sorted(all_threads, key=lambda t: t.created_at):
                    pdf.set_font('Galindo', 'B', 14)
                    pdf.cell(0, 10, sanitizer.sanitize(f"–¢–µ–º–∞: {thread.name}"), new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='L'); pdf.ln(5)
                    async for message in thread.history(limit=500, oldest_first=True): await process_message(message)
            else:
                async for message in channel.history(limit=2000, oldest_first=True): await process_message(message)

    try:
        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –∏ –∫–∞—Ä—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
        pdf.output(LORE_PDF_PATH)
        with open(IMAGE_MAP_PATH, 'w', encoding='utf-8') as f:
            json.dump(image_map, f, ensure_ascii=False, indent=4)
        
        pdf_size_mb = os.path.getsize(LORE_PDF_PATH) / (1024 * 1024)
        
        embed = discord.Embed(title="‚úÖ –õ–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!", color=discord.Color.green())
        embed.description = "–°–æ–∑–¥–∞–Ω `lore.pdf` –∏ `image_map.json`."
        embed.add_field(name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π", value=str(total_messages_count))
        embed.add_field(name="–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", value=str(total_images_count))
        embed.add_field(name="–†–∞–∑–º–µ—Ä PDF", value=f"{pdf_size_mb:.2f} –ú–ë")
        
        if pdf_size_mb < 8.0:
            await interaction.followup.send(embed=embed, file=discord.File(LORE_PDF_PATH), ephemeral=True)
        else:
            embed.description += "\n‚ö†Ô∏è **–§–∞–π–ª PDF —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>8 –ú–ë).** –û–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Discord."
            await interaction.followup.send(embed=embed, ephemeral=True)

    except Exception as e:
        await interaction.followup.send(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", ephemeral=True)
# --- –ù–û–í–û–ï --->

# <<<--- –ù–û–í–û–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ask_lore
@bot.tree.command(name="ask_lore", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –º–∏—Ä—É, –ø—Ä–∞–≤–∏–ª–∞–º –∏ –ª–æ—Ä—É '–í–∞–ª—å–¥–µ—Å–∞'")
@app_commands.describe(question="–í–∞—à –≤–æ–ø—Ä–æ—Å –•—Ä–∞–Ω–∏—Ç–µ–ª—é –∑–Ω–∞–Ω–∏–π.")
@app_commands.checks.cooldown(1, 60.0, key=lambda i: i.user.id)
async def ask_lore(interaction: discord.Interaction, question: str):
    await interaction.response.defer(ephemeral=False, thinking=True)
    
    if not os.path.exists(LORE_PDF_PATH):
        return await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞:** –§–∞–π–ª –ª–æ—Ä–∞ (`lore.pdf`) –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `/update_lore`.")
    if not os.path.exists(IMAGE_MAP_PATH):
        return await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞:** –§–∞–π–ª –∫–∞—Ä—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (`image_map.json`) –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ `/update_lore`.")

    lore_file = None
    try:
        # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
        with open(IMAGE_MAP_PATH, 'r', encoding='utf-8') as f:
            image_map = json.load(f)

        await interaction.edit_original_response(content="*–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ö–∏–≤—ã...*")
        lore_file = genai.upload_file(path=LORE_PDF_PATH, display_name="–ê—Ä—Ö–∏–≤ –í–∞–ª—å–¥–µ—Å–∞")
        
        await interaction.edit_original_response(content="*–ò—â—É –æ—Ç–≤–µ—Ç –≤ –∞—Ä—Ö–∏–≤–∞—Ö...*")
        prompt = get_lore_prompt()
        response = await gemini_model.generate_content_async([prompt, lore_file, f"–í–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞: {question}"])
        
        raw_text = response.text
        
        # --- –ò—â–µ–º —Ç–µ–≥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò ---
        image_ids = re.findall(r'\[ref_img: (\d+)]', raw_text)
        
        # --- –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        clean_text = re.sub(r'\s*\[ref_img: \d+]', '', raw_text).strip()

        embed = discord.Embed(title="üìú –û—Ç–≤–µ—Ç –∏–∑ –∞—Ä—Ö–∏–≤–æ–≤ –í–∞–ª—å–¥–µ—Å–∞", description=clean_text, color=discord.Color.blue())
        embed.add_field(name="–í–∞—à –∑–∞–ø—Ä–æ—Å:", value=question, inline=False)
        embed.set_footer(text=f"–û—Ç–≤–µ—Ç–∏–ª –•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π | –ó–∞–ø—Ä–æ—Å–∏–ª: {interaction.user.display_name}")

        # --- –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑ –Ω–∏—Ö ---
        if image_ids:
            first_id = image_ids[0]
            if first_id in image_map and image_map[first_id]:
                first_image_url = image_map[first_id][0]
                embed.set_image(url=first_image_url)
                print(f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {first_image_url}")

        await interaction.edit_original_response(content=None, embed=embed)

    except Exception as e:
        await interaction.edit_original_response(content=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /ask_lore: {e}")
    finally:
        if lore_file:
            await asyncio.sleep(1) 
            try:
                genai.delete_file(lore_file.name)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {lore_file.name} —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {lore_file.name} —Å —Å–µ—Ä–≤–µ—Ä–∞: {e}")
# --- –ù–û–í–û–ï --->


@bot.tree.command(name="optimize_post", description="–£–ª—É—á—à–∞–µ—Ç –†–ü-–ø–æ—Å—Ç.")
@app_commands.describe(post_text="–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.", optimization_level="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.", image="(–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
@app_commands.choices(optimization_level=[
    discord.app_commands.Choice(name="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏", value="minimal"),
    discord.app_commands.Choice(name="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", value="standard"),
    discord.app_commands.Choice(name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", value="creative"),
])
@app_commands.checks.cooldown(1, 120.0, key=lambda i: i.user.id)
async def optimize_post(interaction: discord.Interaction, post_text: str, optimization_level: discord.app_commands.Choice[str], image: discord.Attachment = None):
    await interaction.response.defer(ephemeral=True, thinking=True)
    if image and (not image.content_type or not image.content_type.startswith("image/")):
        return await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞:** –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.", ephemeral=True)

    level_map = {"minimal": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏", "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "creative": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"}
    prompt = get_optimizer_prompt(level_map[optimization_level.value])
    content_to_send = [prompt, f"\n\n–ü–æ—Å—Ç –∏–≥—Ä–æ–∫–∞:\n---\n{post_text}"]
    
    if image:
        try:
            content_to_send.append(Image.open(io.BytesIO(await image.read())))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await interaction.followup.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç –±–µ–∑ –Ω–µ–≥–æ.", ephemeral=True)

    try:
        response = await gemini_model.generate_content_async(content_to_send)
        result_text = response.text.strip()

        if result_text.startswith("–û–®–ò–ë–ö–ê:"):
            error_embed = discord.Embed(title="‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–±–∞—è –ª–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞!", description=result_text.replace("–û–®–ò–ë–ö–ê:", "").strip(), color=discord.Color.red())
            await interaction.followup.send(embed=error_embed, ephemeral=True)
        else:
            embed = discord.Embed(title="‚ú® –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!", color=discord.Color.gold())
            embed.add_field(name="‚ñ∂Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª:", value=f"```\n{post_text[:1000]}\n```", inline=False)
            embed.add_field(name="‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–ø—Ä–µ–≤—å—é):", value=f"{result_text[:1000]}...", inline=False)
            embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç.")
            await interaction.followup.send(embed=embed, view=PostView(result_text), ephemeral=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /optimize_post: {e}")
        await interaction.followup.send(embed=discord.Embed(title="üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.", color=discord.Color.dark_red()), ephemeral=True)


@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.")
async def help(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", description="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ:", color=discord.Color.blue())
    embed.add_field(name="/optimize_post", value="–£–ª—É—á—à–∞–µ—Ç –≤–∞—à –†–ü-–ø–æ—Å—Ç (–ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ 2 –º–∏–Ω.).", inline=False)
    embed.add_field(name="/ask_lore", value="–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –•—Ä–∞–Ω–∏—Ç–µ–ª—é –∑–Ω–∞–Ω–∏–π (–ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ 1 –º–∏–Ω.).", inline=False)
    embed.add_field(name="/about", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.", inline=False)
    embed.add_field(name="/help", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", inline=False)
    embed.add_field(name="/update_lore", value="**[–ê–î–ú–ò–ù]** –°–æ–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –ª–æ—Ä –≤ PDF, —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤–∞–º.", inline=False)
    embed.set_footer(text="–í–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –í–∞–ª—å–¥–µ—Å–∞.")
    await interaction.response.send_message(embed=embed, ephemeral=True)


@bot.tree.command(name="about", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.")
async def about(interaction: discord.Interaction):
    embed = discord.Embed(title="–û –±–æ—Ç–µ '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –í–∞–ª—å–¥–µ—Å–∞'", description="–Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –∏–≥—Ä–æ–∫–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ '–í–∞–ª—å–¥–µ—Å'.", color=discord.Color.gold())
    embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value="**GX**", inline=True)
    embed.add_field(name="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", value="‚Ä¢ Discord.py\n‚Ä¢ Google Gemini API", inline=True)
    embed.set_footer(text=f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {interaction.guild.name}")
    await interaction.response.send_message(embed=embed, ephemeral=False)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == "__main__":
    keep_alive()
    bot.run(DISCORD_TOKEN)

