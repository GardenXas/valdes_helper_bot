# -*- coding: utf-8 -*-

# --- 1. –ò–ú–ü–û–†–¢–´ –ò –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ---
import discord
from discord import ui, app_commands
from discord.ext import commands, tasks
import google.generativeai as genai
import os
from dotenv import load_dotenv
from flask import Flask
from threading import Thread
import io
import json
import random
import string
from datetime import datetime, time, timezone
import asyncio
from fpdf import FPDF
from fpdf.enums import XPos, YPos
import re
import aiohttp

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MAIN_GUILD_ID = os.getenv("MAIN_GUILD_ID")
ADMIN_GUILD_ID = os.getenv("ADMIN_GUILD_ID")
CODE_CHANNEL_ID = os.getenv("CODE_CHANNEL_ID")
OWNER_USER_ID = os.getenv("OWNER_USER_ID")
LORE_CHANNEL_IDS = os.getenv("LORE_CHANNEL_IDS")

LORE_PDF_PATH = "lore.pdf"
IMAGE_MAP_PATH = "image_map.json"
IMAGE_CACHE_DIR = "image_cache"

if not all([DISCORD_TOKEN, GEMINI_API_KEY, MAIN_GUILD_ID, ADMIN_GUILD_ID, CODE_CHANNEL_ID, OWNER_USER_ID, LORE_CHANNEL_IDS]):
    raise ValueError("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π –∏–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

try:
    CODE_CHANNEL_ID = int(CODE_CHANNEL_ID)
    OWNER_USER_ID = int(OWNER_USER_ID)
except ValueError:
    raise ValueError("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: CODE_CHANNEL_ID –∏ OWNER_USER_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')


# --- 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ –ò –§–£–ù–ö–¶–ò–ò ---

def get_optimizer_prompt(level):
    return f"""
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ '–í–∞–ª—å–¥–µ—Å'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç –∏–≥—Ä–æ–∫–∞.

**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø –ü–û–°–¢–ê (–°–ê–ú–û–ï –í–ê–ñ–ù–û–ï):**
1.  **–î–ï–ô–°–¢–í–ò–Ø:** –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏. –ü—Ä–∏–º–µ—Ä: `**–û–Ω –ø–æ–¥–Ω—è–ª—Å—è —Å –∫—Ä–æ–≤–∞—Ç–∏.**`
2.  **–ú–´–°–õ–ò –ò –ó–í–£–ö–ò:** –í—Å–µ –º—ã—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ø–µ–≤–∞–Ω–∏–µ, –º—ã—á–∞–Ω–∏–µ –∏ —Ç.–¥., –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏. –ü—Ä–∏–º–µ—Ä: `"–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å."` –∏–ª–∏ `"–ú–º–º-—Ö–º–º..."`
3.  **–†–ï–ß–¨:** –í—Å—è –ø—Ä—è–º–∞—è —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –¥–µ—Ñ–∏—Å–∞ –∏ –ø—Ä–æ–±–µ–ª–∞. –ü—Ä–∏–º–µ—Ä: `- –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.`
4.  –ö–∞–∂–¥—ã–π —Ç–∏–ø (–¥–µ–π—Å—Ç–≤–∏–µ, –º—ã—Å–ª—å, —Ä–µ—á—å) **–û–ë–Ø–ó–ê–ù** –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.

**–ó–û–õ–û–¢–´–ï –ü–†–ê–í–ò–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò:**
1.  **–ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–ï –û–¢ –¢–†–ï–¢–¨–ï–ì–û –õ–ò–¶–ê:** –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –æ—Ç **—Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞** (–û–Ω/–û–Ω–∞), –¥–∞–∂–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–ø–∏—Å–∞–ª –æ—Ç –ø–µ—Ä–≤–æ–≥–æ ('–Ø –¥–µ–ª–∞—é').
2.  **–ó–ê–ü–†–ï–¢ –ù–ê –°–ò–ú–í–û–õ–´:** –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ `** **`, `" "` –∏ `- `. –ù–∏–∫–∞–∫–∏—Ö `()`, `<<>>` –∏ –ø—Ä–æ—á–µ–≥–æ.
3.  **–ù–ï –ë–´–¢–¨ –°–û–ê–í–¢–û–†–û–ú:** –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.
"""

def get_lore_prompt():
    return """
–¢—ã ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π –º–∏—Ä–∞ '–í–∞–ª—å–¥–µ—Å'. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω PDF-–¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–µ—Å—å –ª–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.
**–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞:** –î–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–µ–∫—Å—Ç–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
---
**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê –ê–ù–ê–õ–ò–ó–ê –ò –û–¢–í–ï–¢–ê:**
1.  **–ù–ê–ô–î–ò –†–ï–õ–ï–í–ê–ù–¢–ù–´–ô –¢–ï–ö–°–¢:** –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–∞–π–¥–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞.
2.  **–†–ê–ë–û–¢–ê –° –¢–ï–ì–ê–ú–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:**
    *   –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–≥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: `[ref_img: 112233445566778899]`.
    *   –≠—Ç–æ—Ç —Ç–µ–≥ ‚Äî –Ω–µ –¥–ª—è —Ç–µ–±—è, –∞ –¥–ª—è –±–æ—Ç–∞. –û–Ω –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫ –¥–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞.
    *   –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–±–æ–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–∫–æ–π —Ç–µ–≥, —Ç—ã **–û–ë–Ø–ó–ê–ù** –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç **–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô**, –≤ —Ç–æ–º –∂–µ –≤–∏–¥–µ.
3.  **–°–°–´–õ–ê–ô–°–Ø –ù–ê –ò–°–¢–û–ß–ù–ò–ö:** –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –≤–∏–¥–∞ `–ò—Å—Ç–æ—á–Ω–∏–∫: –ö–∞–Ω–∞–ª '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'`. –í —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ —Ç—ã **–û–ë–Ø–ó–ê–ù** —É–∫–∞–∑–∞—Ç—å, –∏–∑ –∫–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü—Ä–∏–º–µ—Ä: "–°–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ '–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞', ..."
4.  **–ë–£–î–¨ –ß–ï–°–¢–ù–´–ú:** –ï—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
"""

def robust_markdown_to_html(text: str) -> str:
    text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    text = re.sub(r'\*\*\*(.+?)\*\*\*', r'<b><i>\1</i></b>', text, flags=re.DOTALL)
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text, flags=re.DOTALL)
    text = re.sub(r'_(.+?)_', r'<i>\1</i>', text, flags=re.DOTALL)
    text = re.sub(r'__(.+?)__', r'<u>\1</u>', text, flags=re.DOTALL)
    return text.replace('\n', '<br/>')

app = Flask('')
@app.route('/')
def home(): return "Bot is alive and running!"
def run(): app.run(host='0.0.0.0', port=8080)
def keep_alive(): Thread(target=run, daemon=True).start()

class OptimizedPostModal(ui.Modal, title='–í–∞—à —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ—Å—Ç'):
    def __init__(self, optimized_text: str):
        super().__init__()
        self.post_content = ui.TextInput(label="–¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é", style=discord.TextStyle.paragraph, default=optimized_text, max_length=1800)
        self.add_item(self.post_content)
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message("–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.", ephemeral=True, delete_after=3)

class PostView(ui.View):
    def __init__(self, optimized_text: str):
        super().__init__(timeout=300)
        self.optimized_text = optimized_text
    @ui.button(label="üìù –ü–æ–∫–∞–∑–∞—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", style=discord.ButtonStyle.primary)
    async def show_modal_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(OptimizedPostModal(self.optimized_text))

DAILY_ACCESS_CODE, CODE_FILE = "", "code.json"
def save_daily_code(code):
    with open(CODE_FILE, 'w') as f: json.dump({'code': code, 'date': datetime.now().strftime('%Y-%m-%d')}, f)

def load_daily_code():
    global DAILY_ACCESS_CODE
    try:
        with open(CODE_FILE, 'r') as f: data = json.load(f)
        if data['date'] == datetime.now().strftime('%Y-%m-%d'):
            DAILY_ACCESS_CODE = data['code']; print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {DAILY_ACCESS_CODE}"); return
    except (FileNotFoundError, json.JSONDecodeError): pass
    DAILY_ACCESS_CODE = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8)); save_daily_code(DAILY_ACCESS_CODE); print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–¥: {DAILY_ACCESS_CODE}")

intents = discord.Intents.default(); intents.message_content = True; intents.guilds = True
bot = commands.Bot(command_prefix="!", intents=intents)

# --- 3. –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –°–û–ë–´–¢–ò–Ø –ë–û–¢–ê ---
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!');
    if not os.path.exists(IMAGE_CACHE_DIR):
        os.makedirs(IMAGE_CACHE_DIR)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∫—ç—à–∞: {IMAGE_CACHE_DIR}")

    load_daily_code()
    send_daily_code_task.start()
    try:
        synced = await bot.tree.sync(); print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e: print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

@tasks.loop(time=time(hour=4, minute=0, tzinfo=timezone.utc))
async def send_daily_code_task():
    global DAILY_ACCESS_CODE
    DAILY_ACCESS_CODE = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    save_daily_code(DAILY_ACCESS_CODE)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥: {DAILY_ACCESS_CODE}")
    try:
        channel = bot.get_channel(CODE_CHANNEL_ID)
        if channel:
            embed = discord.Embed(title="üîë –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", description=f"–ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è `/update_lore` –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n```{DAILY_ACCESS_CODE}```", color=discord.Color.dark_blue(), timestamp=datetime.now())
            await channel.send(embed=embed)
            print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª '{channel.name}'.")
        else:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–∞–Ω–∞–ª –¥–ª—è –∫–æ–¥–∞ —Å ID {CODE_CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")

@send_daily_code_task.before_loop
async def before_send_daily_code_task():
    await bot.wait_until_ready()
    print("–¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")

@bot.tree.command(name="update_lore", description="[–ê–î–ú–ò–ù] –°–æ–±–∏—Ä–∞–µ—Ç –í–ï–°–¨ –ª–æ—Ä (–≤–∫–ª—é—á–∞—è embeds), –∫—ç—à–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF.")
@app_commands.describe(access_code="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞")
async def update_lore(interaction: discord.Interaction, access_code: str):
    if not (interaction.user.id == OWNER_USER_ID or interaction.user.guild_permissions.administrator):
        return await interaction.response.send_message("‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", ephemeral=True)
    if access_code != DAILY_ACCESS_CODE:
        return await interaction.response.send_message("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.**", ephemeral=True)
        
    await interaction.response.defer(ephemeral=True, thinking=True)
    
    try: channel_ids = [int(id.strip()) for id in LORE_CHANNEL_IDS.split(',')]
    except ValueError: return await interaction.followup.send("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: LORE_CHANNEL_IDS.", ephemeral=True)
    
    pdf = FPDF()
    try:
        font_path = 'GalindoCyrillic-Regular.ttf'
        pdf.add_font('Galindo', '', font_path)
        pdf.add_font('Galindo', 'B', font_path)
        pdf.add_font('Galindo', 'I', font_path)
        pdf.add_font('Galindo', 'BI', font_path)
    except Exception as e: return await interaction.followup.send(f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ —à—Ä–∏—Ñ—Ç–æ–º:**\n{e}", ephemeral=True)
    
    total_messages_count, total_images_count, downloaded_images_count = 0, 0, 0
    image_map = {}
    
    if os.path.exists(IMAGE_CACHE_DIR):
        for f in os.listdir(IMAGE_CACHE_DIR):
            os.remove(os.path.join(IMAGE_CACHE_DIR, f))
    else:
        os.makedirs(IMAGE_CACHE_DIR)

    channels_to_parse = [bot.get_channel(cid) for cid in channel_ids if bot.get_channel(cid)]
    sorted_channels = sorted(channels_to_parse, key=lambda c: c.position)

    timeout = aiohttp.ClientTimeout(total=60)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        async def process_message(message: discord.Message):
            nonlocal total_messages_count, total_images_count, downloaded_images_count, image_map
            
            if message.author.bot: return

            image_urls = []
            if message.attachments:
                image_urls.extend(att.url for att in message.attachments if att.content_type and att.content_type.startswith('image/'))
            if message.embeds:
                for embed in message.embeds:
                    if embed.image and embed.image.url:
                        image_urls.append(embed.image.url)

            all_text_parts = []
            if message.content:
                all_text_parts.append(message.content)
            
            if message.embeds:
                for embed in message.embeds:
                    if embed.title: all_text_parts.append(f"# {embed.title}")
                    if embed.description: all_text_parts.append(embed.description)
                    for field in embed.fields: all_text_parts.append(f"### {field.name}\n{field.value}")

            full_message_text = "\n\n".join(all_text_parts)

            if not full_message_text and not image_urls: return

            total_images_count += len(image_urls)
            
            if image_urls:
                image_paths = []
                for idx, url in enumerate(image_urls):
                    try:
                        async with session.get(url) as resp:
                            if resp.status == 200:
                                image_bytes = await resp.read()
                                file_extension = url.split('.')[-1].split('?')[0] if '.' in url.split('/')[-1] else 'png'
                                image_filename = f"{message.id}_{idx}.{file_extension}"
                                image_path = os.path.join(IMAGE_CACHE_DIR, image_filename)
                                with open(image_path, 'wb') as f: f.write(image_bytes)
                                image_paths.append(image_path)
                                downloaded_images_count += 1
                            else:
                                print(f"–û–®–ò–ë–ö–ê –°–¢–ê–¢–£–°–ê {resp.status} –¥–ª—è URL {url}")
                    except Exception as e:
                        print(f"–û–®–ò–ë–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø {url}: {e}")
                
                if image_paths:
                    image_map[str(message.id)] = image_paths

            pdf.set_fill_color(240, 240, 240)
            pdf.set_font('Galindo', 'I', 8)
            channel_name = message.channel.name if hasattr(message.channel, 'name') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–¥"
            pdf.cell(0, 5, f"–ò—Å—Ç–æ—á–Ω–∏–∫: –ö–∞–Ω–∞–ª '{channel_name}' | ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.id}", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='L', fill=True)
            pdf.ln(2)
            
            if full_message_text:
                pdf.set_font('Galindo', '', 12)
                pdf.write_html(robust_markdown_to_html(full_message_text))
                pdf.ln(1)
            
            if str(message.id) in image_map:
                pdf.set_font('Galindo', 'I', 9)
                pdf.set_text_color(150, 150, 150)
                pdf.cell(0, 5, f"[ref_img: {message.id}]", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
                pdf.set_text_color(0, 0, 0)

            pdf.ln(4)
            total_messages_count += 1

        for channel in sorted_channels:
            if not channel:
                print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö–∞–Ω–∞–ª –∏–∑ LORE_CHANNEL_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue
            pdf.add_page(); pdf.set_font('Galindo', 'B', 16)
            pdf.cell(0, 10, f'–°–±–æ—Ä–Ω–∏–∫ –õ–æ—Ä–∞: {channel.name}', new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C'); pdf.ln(10)
            
            if isinstance(channel, discord.ForumChannel):
                all_threads = channel.threads + [t async for t in channel.archived_threads(limit=None)]
                for thread in sorted(all_threads, key=lambda t: t.created_at):
                    pdf.set_font('Galindo', 'B', 14)
                    pdf.cell(0, 10, f"–¢–µ–º–∞: {thread.name}", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='L'); pdf.ln(5)
                    async for message in thread.history(limit=500, oldest_first=True): await process_message(message)
            else:
                async for message in channel.history(limit=2000, oldest_first=True): await process_message(message)

    try:
        pdf.output(LORE_PDF_PATH)
        with open(IMAGE_MAP_PATH, 'w', encoding='utf-8') as f:
            json.dump(image_map, f, ensure_ascii=False, indent=4)
        
        pdf_size_mb = os.path.getsize(LORE_PDF_PATH) / (1024 * 1024)
        
        embed = discord.Embed(title="‚úÖ –õ–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!", color=discord.Color.green())
        embed.description = "–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ embeds. –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω."
        embed.add_field(name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π", value=str(total_messages_count))
        embed.add_field(name="–ù–∞–π–¥–µ–Ω–æ / –°–∫–∞—á–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", value=f"{total_images_count} / {downloaded_images_count}")
        embed.add_field(name="–†–∞–∑–º–µ—Ä PDF", value=f"{pdf_size_mb:.2f} –ú–ë")
        
        if pdf_size_mb < 25.0:
            await interaction.followup.send(embed=embed, file=discord.File(LORE_PDF_PATH), ephemeral=True)
        else:
            embed.description += "\n‚ö†Ô∏è **–§–∞–π–ª PDF —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>25 –ú–ë).** –û–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
            await interaction.followup.send(embed=embed, ephemeral=True)

    except Exception as e:
        await interaction.followup.send(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", ephemeral=True)

@bot.tree.command(name="ask_lore", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –º–∏—Ä—É, –ø—Ä–∞–≤–∏–ª–∞–º –∏ –ª–æ—Ä—É '–í–∞–ª—å–¥–µ—Å–∞'")
@app_commands.describe(question="–í–∞—à –≤–æ–ø—Ä–æ—Å –•—Ä–∞–Ω–∏—Ç–µ–ª—é –∑–Ω–∞–Ω–∏–π.")
@app_commands.checks.cooldown(1, 60.0, key=lambda i: i.user.id)
async def ask_lore(interaction: discord.Interaction, question: str):
    await interaction.response.defer(ephemeral=False, thinking=True)
    
    if not os.path.exists(LORE_PDF_PATH) or not os.path.exists(IMAGE_MAP_PATH):
        return await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞:** –§–∞–π–ª—ã –ª–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ `/update_lore`.")

    lore_file = None
    try:
        with open(IMAGE_MAP_PATH, 'r', encoding='utf-8') as f:
            image_map = json.load(f)

        await interaction.edit_original_response(content="*–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ö–∏–≤—ã...*")
        lore_file = genai.upload_file(path=LORE_PDF_PATH, display_name="–ê—Ä—Ö–∏–≤ –í–∞–ª—å–¥–µ—Å–∞")
        
        await interaction.edit_original_response(content="*–ò—â—É –æ—Ç–≤–µ—Ç –≤ –∞—Ä—Ö–∏–≤–∞—Ö...*")
        prompt = get_lore_prompt()
        response = await gemini_model.generate_content_async([prompt, lore_file, f"–í–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞: {question}"])
        
        raw_text = response.text
        
        image_ids = re.findall(r'\[ref_img: (\d+)]', raw_text)
        clean_text = re.sub(r'\s*\[ref_img: \d+]', '', raw_text).strip()

        embed = discord.Embed(title="üìú –û—Ç–≤–µ—Ç –∏–∑ –∞—Ä—Ö–∏–≤–æ–≤ –í–∞–ª—å–¥–µ—Å–∞", description=clean_text, color=discord.Color.blue())
        embed.add_field(name="–í–∞—à –∑–∞–ø—Ä–æ—Å:", value=question, inline=False)
        embed.set_footer(text=f"–û—Ç–≤–µ—Ç–∏–ª –•—Ä–∞–Ω–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π | –ó–∞–ø—Ä–æ—Å–∏–ª: {interaction.user.display_name}")

        files_to_send = []
        if image_ids:
            first_id = image_ids[0]
            if first_id in image_map and image_map[first_id]:
                image_path = image_map[first_id][0]
                if os.path.exists(image_path):
                    file = discord.File(image_path, filename="image.png")
                    files_to_send.append(file)
                    embed.set_image(url=f"attachment://image.png")
        
        await interaction.edit_original_response(content=None, embed=embed, attachments=files_to_send)

    except Exception as e:
        await interaction.edit_original_response(content=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /ask_lore: {e}")
    finally:
        if lore_file:
            await asyncio.sleep(1) 
            try: genai.delete_file(lore_file.name); print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {lore_file.name} —É–¥–∞–ª–µ–Ω.")
            except Exception as e: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {lore_file.name}: {e}")

@bot.tree.command(name="optimize_post", description="–£–ª—É—á—à–∞–µ—Ç –†–ü-–ø–æ—Å—Ç.")
@app_commands.describe(post_text="–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.", optimization_level="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è.", image="(–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
@app_commands.choices(optimization_level=[
    discord.app_commands.Choice(name="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏", value="minimal"),
    discord.app_commands.Choice(name="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", value="standard"),
    discord.app_commands.Choice(name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", value="creative"),
])
@app_commands.checks.cooldown(1, 120.0, key=lambda i: i.user.id)
async def optimize_post(interaction: discord.Interaction, post_text: str, optimization_level: discord.app_commands.Choice[str], image: discord.Attachment = None):
    await interaction.response.defer(ephemeral=True, thinking=True)
    if image and (not image.content_type or not image.content_type.startswith("image/")):
        return await interaction.followup.send("‚ùå **–û—à–∏–±–∫–∞:** –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.", ephemeral=True)

    level_map = {"minimal": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏", "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "creative": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"}
    prompt = get_optimizer_prompt(level_map[optimization_level.value])
    content_to_send = [prompt, f"\n\n–ü–æ—Å—Ç –∏–≥—Ä–æ–∫–∞:\n---\n{post_text}"]
    
    if image:
        try:
            image_bytes = await image.read()
            img = io.BytesIO(image_bytes)
            content_to_send.append(img)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await interaction.followup.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç –±–µ–∑ –Ω–µ–≥–æ.", ephemeral=True)

    try:
        response = await gemini_model.generate_content_async(content_to_send)
        result_text = response.text.strip()

        if result_text.startswith("–û–®–ò–ë–ö–ê:"):
            error_embed = discord.Embed(title="‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–±–∞—è –ª–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞!", description=result_text.replace("–û–®–ò–ë–ö–ê:", "").strip(), color=discord.Color.red())
            await interaction.followup.send(embed=error_embed, ephemeral=True)
        else:
            embed = discord.Embed(title="‚ú® –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!", color=discord.Color.gold())
            embed.add_field(name="‚ñ∂Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª:", value=f"```\n{post_text[:1000]}\n```", inline=False)
            embed.add_field(name="‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–ø—Ä–µ–≤—å—é):", value=f"{result_text[:1000]}...", inline=False)
            embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç.")
            await interaction.followup.send(embed=embed, view=PostView(result_text), ephemeral=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /optimize_post: {e}")
        await interaction.followup.send(embed=discord.Embed(title="üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.", color=discord.Color.dark_red()), ephemeral=True)

@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.")
async def help(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", description="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ:", color=discord.Color.blue())
    embed.add_field(name="/optimize_post", value="–£–ª—É—á—à–∞–µ—Ç –≤–∞—à –†–ü-–ø–æ—Å—Ç (–ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ 2 –º–∏–Ω.).", inline=False)
    embed.add_field(name="/ask_lore", value="–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –•—Ä–∞–Ω–∏—Ç–µ–ª—é –∑–Ω–∞–Ω–∏–π (–ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ 1 –º–∏–Ω.).", inline=False)
    embed.add_field(name="/about", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.", inline=False)
    embed.add_field(name="/help", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", inline=False)
    embed.add_field(name="/update_lore", value="**[–ê–î–ú–ò–ù]** –°–æ–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –ª–æ—Ä (–≤–∫–ª—é—á–∞—è embeds), –∫—ç—à–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF.", inline=False)
    embed.set_footer(text="–í–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –í–∞–ª—å–¥–µ—Å–∞.")
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="about", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.")
async def about(interaction: discord.Interaction):
    embed = discord.Embed(title="–û –±–æ—Ç–µ '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –í–∞–ª—å–¥–µ—Å–∞'", description="–Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –∏–≥—Ä–æ–∫–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ '–í–∞–ª—å–¥–µ—Å'.", color=discord.Color.gold())
    embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value="**GX**", inline=True)
    embed.add_field(name="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", value="‚Ä¢ Discord.py\n‚Ä¢ Google Gemini API", inline=True)
    embed.set_footer(text=f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {interaction.guild.name}")
    await interaction.response.send_message(embed=embed, ephemeral=False)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == "__main__":
    keep_alive()
    bot.run(DISCORD_TOKEN)

